if(function(t,e){"object"==typeof module&&"object"==typeof module.exports?module.exports=t.document?e(t,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return e(t)}:e(t)}("undefined"!=typeof window?window:this,function(C,t){var e=[],E=C.document,c=e.slice,g=e.concat,a=e.push,o=e.indexOf,n={},i=n.toString,h=n.hasOwnProperty,m={},r="2.2.4",S=function(t,e){return new S.fn.init(t,e)},s=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,l=/^-ms-/,u=/-([\da-z])/gi,f=function(t,e){return e.toUpperCase()};function p(t){var e=!!t&&"length"in t&&t.length,n=S.type(t);return"function"!==n&&!S.isWindow(t)&&("array"===n||0===e||"number"==typeof e&&0<e&&e-1 in t)}S.fn=S.prototype={jquery:r,constructor:S,selector:"",length:0,toArray:function(){return c.call(this)},get:function(t){return null!=t?t<0?this[t+this.length]:this[t]:c.call(this)},pushStack:function(t){var e=S.merge(this.constructor(),t);return e.prevObject=this,e.context=this.context,e},each:function(t){return S.each(this,t)},map:function(n){return this.pushStack(S.map(this,function(t,e){return n.call(t,e,t)}))},slice:function(){return this.pushStack(c.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(t){var e=this.length,n=+t+(t<0?e:0);return this.pushStack(0<=n&&n<e?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:a,sort:e.sort,splice:e.splice},S.extend=S.fn.extend=function(){var t,e,n,i,o,r,s=arguments[0]||{},a=1,l=arguments.length,u=!1;for("boolean"==typeof s&&(u=s,s=arguments[a]||{},a++),"object"==typeof s||S.isFunction(s)||(s={}),a===l&&(s=this,a--);a<l;a++)if(null!=(t=arguments[a]))for(e in t)n=s[e],s!==(i=t[e])&&(u&&i&&(S.isPlainObject(i)||(o=S.isArray(i)))?(o?(o=!1,r=n&&S.isArray(n)?n:[]):r=n&&S.isPlainObject(n)?n:{},s[e]=S.extend(u,r,i)):void 0!==i&&(s[e]=i));return s},S.extend({expando:"jQuery"+(r+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isFunction:function(t){return"function"===S.type(t)},isArray:Array.isArray,isWindow:function(t){return null!=t&&t===t.window},isNumeric:function(t){var e=t&&t.toString();return!S.isArray(t)&&0<=e-parseFloat(e)+1},isPlainObject:function(t){var e;if("object"!==S.type(t)||t.nodeType||S.isWindow(t))return!1;if(t.constructor&&!h.call(t,"constructor")&&!h.call(t.constructor.prototype||{},"isPrototypeOf"))return!1;for(e in t);return void 0===e||h.call(t,e)},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},type:function(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?n[i.call(t)]||"object":typeof t},globalEval:function(t){var e,n=eval;(t=S.trim(t))&&(1===t.indexOf("use strict")?((e=E.createElement("script")).text=t,E.head.appendChild(e).parentNode.removeChild(e)):n(t))},camelCase:function(t){return t.replace(l,"ms-").replace(u,f)},nodeName:function(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()},each:function(t,e){var n,i=0;if(p(t))for(n=t.length;i<n&&!1!==e.call(t[i],i,t[i]);i++);else for(i in t)if(!1===e.call(t[i],i,t[i]))break;return t},trim:function(t){return null==t?"":(t+"").replace(s,"")},makeArray:function(t,e){var n=e||[];return null!=t&&(p(Object(t))?S.merge(n,"string"==typeof t?[t]:t):a.call(n,t)),n},inArray:function(t,e,n){return null==e?-1:o.call(e,t,n)},merge:function(t,e){for(var n=+e.length,i=0,o=t.length;i<n;i++)t[o++]=e[i];return t.length=o,t},grep:function(t,e,n){for(var i=[],o=0,r=t.length,s=!n;o<r;o++)!e(t[o],o)!==s&&i.push(t[o]);return i},map:function(t,e,n){var i,o,r=0,s=[];if(p(t))for(i=t.length;r<i;r++)null!=(o=e(t[r],r,n))&&s.push(o);else for(r in t)null!=(o=e(t[r],r,n))&&s.push(o);return g.apply([],s)},guid:1,proxy:function(t,e){var n,i,o;if("string"==typeof e&&(n=t[e],e=t,t=n),S.isFunction(t))return i=c.call(arguments,2),(o=function(){return t.apply(e||this,i.concat(c.call(arguments)))}).guid=t.guid=t.guid||S.guid++,o},now:Date.now,support:m}),"function"==typeof Symbol&&(S.fn[Symbol.iterator]=e[Symbol.iterator]),S.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(t,e){n["[object "+e+"]"]=e.toLowerCase()});var d=function(n){var t,h,x,r,o,g,f,m,w,l,u,T,C,s,E,v,a,c,y,S="sizzle"+1*new Date,b=n.document,$=0,i=0,p=ot(),d=ot(),k=ot(),N=function(t,e){return t===e&&(u=!0),0},D={}.hasOwnProperty,e=[],A=e.pop,j=e.push,O=e.push,I=e.slice,L=function(t,e){for(var n=0,i=t.length;n<i;n++)if(t[n]===e)return n;return-1},R="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",q="[\\x20\\t\\r\\n\\f]",H="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",P="\\["+q+"*("+H+")(?:"+q+"*([*^$|!~]?=)"+q+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+H+"))|)"+q+"*\\]",F=":("+H+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+P+")*)|.*)\\)|)",W=new RegExp(q+"+","g"),M=new RegExp("^"+q+"+|((?:^|[^\\\\])(?:\\\\.)*)"+q+"+$","g"),B=new RegExp("^"+q+"*,"+q+"*"),U=new RegExp("^"+q+"*([>+~]|"+q+")"+q+"*"),_=new RegExp("="+q+"*([^\\]'\"]*?)"+q+"*\\]","g"),z=new RegExp(F),V=new RegExp("^"+H+"$"),X={ID:new RegExp("^#("+H+")"),CLASS:new RegExp("^\\.("+H+")"),TAG:new RegExp("^("+H+"|[*])"),ATTR:new RegExp("^"+P),PSEUDO:new RegExp("^"+F),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+q+"*(even|odd|(([+-]|)(\\d*)n|)"+q+"*(?:([+-]|)"+q+"*(\\d+)|))"+q+"*\\)|)","i"),bool:new RegExp("^(?:"+R+")$","i"),needsContext:new RegExp("^"+q+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+q+"*((?:-\\d)?\\d*)"+q+"*\\)|)(?=[^-]|$)","i")},Q=/^(?:input|select|textarea|button)$/i,Y=/^h\d$/i,G=/^[^{]+\{\s*\[native \w/,J=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,K=/[+~]/,Z=/'|\\/g,tt=new RegExp("\\\\([\\da-f]{1,6}"+q+"?|("+q+")|.)","ig"),et=function(t,e,n){var i="0x"+e-65536;return i!=i||n?e:i<0?String.fromCharCode(i+65536):String.fromCharCode(i>>10|55296,1023&i|56320)},nt=function(){T()};try{O.apply(e=I.call(b.childNodes),b.childNodes),e[b.childNodes.length].nodeType}catch(t){O={apply:e.length?function(t,e){j.apply(t,I.call(e))}:function(t,e){for(var n=t.length,i=0;t[n++]=e[i++];);t.length=n-1}}}function it(t,e,n,i){var o,r,s,a,l,u,c,f,p=e&&e.ownerDocument,d=e?e.nodeType:9;if(n=n||[],"string"!=typeof t||!t||1!==d&&9!==d&&11!==d)return n;if(!i&&((e?e.ownerDocument||e:b)!==C&&T(e),e=e||C,E)){if(11!==d&&(u=J.exec(t)))if(o=u[1]){if(9===d){if(!(s=e.getElementById(o)))return n;if(s.id===o)return n.push(s),n}else if(p&&(s=p.getElementById(o))&&y(e,s)&&s.id===o)return n.push(s),n}else{if(u[2])return O.apply(n,e.getElementsByTagName(t)),n;if((o=u[3])&&h.getElementsByClassName&&e.getElementsByClassName)return O.apply(n,e.getElementsByClassName(o)),n}if(h.qsa&&!k[t+" "]&&(!v||!v.test(t))){if(1!==d)p=e,f=t;else if("object"!==e.nodeName.toLowerCase()){for((a=e.getAttribute("id"))?a=a.replace(Z,"\\$&"):e.setAttribute("id",a=S),r=(c=g(t)).length,l=V.test(a)?"#"+a:"[id='"+a+"']";r--;)c[r]=l+" "+ht(c[r]);f=c.join(","),p=K.test(t)&&pt(e.parentNode)||e}if(f)try{return O.apply(n,p.querySelectorAll(f)),n}catch(t){}finally{a===S&&e.removeAttribute("id")}}}return m(t.replace(M,"$1"),e,n,i)}function ot(){var i=[];return function t(e,n){return i.push(e+" ")>x.cacheLength&&delete t[i.shift()],t[e+" "]=n}}function rt(t){return t[S]=!0,t}function st(t){var e=C.createElement("div");try{return!!t(e)}catch(t){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function at(t,e){for(var n=t.split("|"),i=n.length;i--;)x.attrHandle[n[i]]=e}function lt(t,e){var n=e&&t,i=n&&1===t.nodeType&&1===e.nodeType&&(~e.sourceIndex||1<<31)-(~t.sourceIndex||1<<31);if(i)return i;if(n)for(;n=n.nextSibling;)if(n===e)return-1;return t?1:-1}function ut(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function ct(n){return function(t){var e=t.nodeName.toLowerCase();return("input"===e||"button"===e)&&t.type===n}}function ft(s){return rt(function(r){return r=+r,rt(function(t,e){for(var n,i=s([],t.length,r),o=i.length;o--;)t[n=i[o]]&&(t[n]=!(e[n]=t[n]))})})}function pt(t){return t&&void 0!==t.getElementsByTagName&&t}for(t in h=it.support={},o=it.isXML=function(t){var e=t&&(t.ownerDocument||t).documentElement;return!!e&&"HTML"!==e.nodeName},T=it.setDocument=function(t){var e,n,i=t?t.ownerDocument||t:b;return i!==C&&9===i.nodeType&&i.documentElement&&(s=(C=i).documentElement,E=!o(C),(n=C.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener("unload",nt,!1):n.attachEvent&&n.attachEvent("onunload",nt)),h.attributes=st(function(t){return t.className="i",!t.getAttribute("className")}),h.getElementsByTagName=st(function(t){return t.appendChild(C.createComment("")),!t.getElementsByTagName("*").length}),h.getElementsByClassName=G.test(C.getElementsByClassName),h.getById=st(function(t){return s.appendChild(t).id=S,!C.getElementsByName||!C.getElementsByName(S).length}),h.getById?(x.find.ID=function(t,e){if(void 0!==e.getElementById&&E){var n=e.getElementById(t);return n?[n]:[]}},x.filter.ID=function(t){var e=t.replace(tt,et);return function(t){return t.getAttribute("id")===e}}):(delete x.find.ID,x.filter.ID=function(t){var n=t.replace(tt,et);return function(t){var e=void 0!==t.getAttributeNode&&t.getAttributeNode("id");return e&&e.value===n}}),x.find.TAG=h.getElementsByTagName?function(t,e){return void 0!==e.getElementsByTagName?e.getElementsByTagName(t):h.qsa?e.querySelectorAll(t):void 0}:function(t,e){var n,i=[],o=0,r=e.getElementsByTagName(t);if("*"===t){for(;n=r[o++];)1===n.nodeType&&i.push(n);return i}return r},x.find.CLASS=h.getElementsByClassName&&function(t,e){if(void 0!==e.getElementsByClassName&&E)return e.getElementsByClassName(t)},a=[],v=[],(h.qsa=G.test(C.querySelectorAll))&&(st(function(t){s.appendChild(t).innerHTML="<a id='"+S+"'></a><select id='"+S+"-\r\\' msallowcapture=''><option selected=''></option></select>",t.querySelectorAll("[msallowcapture^='']").length&&v.push("[*^$]="+q+"*(?:''|\"\")"),t.querySelectorAll("[selected]").length||v.push("\\["+q+"*(?:value|"+R+")"),t.querySelectorAll("[id~="+S+"-]").length||v.push("~="),t.querySelectorAll(":checked").length||v.push(":checked"),t.querySelectorAll("a#"+S+"+*").length||v.push(".#.+[+~]")}),st(function(t){var e=C.createElement("input");e.setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),t.querySelectorAll("[name=d]").length&&v.push("name"+q+"*[*^$|!~]?="),t.querySelectorAll(":enabled").length||v.push(":enabled",":disabled"),t.querySelectorAll("*,:x"),v.push(",.*:")})),(h.matchesSelector=G.test(c=s.matches||s.webkitMatchesSelector||s.mozMatchesSelector||s.oMatchesSelector||s.msMatchesSelector))&&st(function(t){h.disconnectedMatch=c.call(t,"div"),c.call(t,"[s!='']:x"),a.push("!=",F)}),v=v.length&&new RegExp(v.join("|")),a=a.length&&new RegExp(a.join("|")),e=G.test(s.compareDocumentPosition),y=e||G.test(s.contains)?function(t,e){var n=9===t.nodeType?t.documentElement:t,i=e&&e.parentNode;return t===i||!(!i||1!==i.nodeType||!(n.contains?n.contains(i):t.compareDocumentPosition&&16&t.compareDocumentPosition(i)))}:function(t,e){if(e)for(;e=e.parentNode;)if(e===t)return!0;return!1},N=e?function(t,e){if(t===e)return u=!0,0;var n=!t.compareDocumentPosition-!e.compareDocumentPosition;return n||(1&(n=(t.ownerDocument||t)===(e.ownerDocument||e)?t.compareDocumentPosition(e):1)||!h.sortDetached&&e.compareDocumentPosition(t)===n?t===C||t.ownerDocument===b&&y(b,t)?-1:e===C||e.ownerDocument===b&&y(b,e)?1:l?L(l,t)-L(l,e):0:4&n?-1:1)}:function(t,e){if(t===e)return u=!0,0;var n,i=0,o=t.parentNode,r=e.parentNode,s=[t],a=[e];if(!o||!r)return t===C?-1:e===C?1:o?-1:r?1:l?L(l,t)-L(l,e):0;if(o===r)return lt(t,e);for(n=t;n=n.parentNode;)s.unshift(n);for(n=e;n=n.parentNode;)a.unshift(n);for(;s[i]===a[i];)i++;return i?lt(s[i],a[i]):s[i]===b?-1:a[i]===b?1:0}),C},it.matches=function(t,e){return it(t,null,null,e)},it.matchesSelector=function(t,e){if((t.ownerDocument||t)!==C&&T(t),e=e.replace(_,"='$1']"),h.matchesSelector&&E&&!k[e+" "]&&(!a||!a.test(e))&&(!v||!v.test(e)))try{var n=c.call(t,e);if(n||h.disconnectedMatch||t.document&&11!==t.document.nodeType)return n}catch(t){}return 0<it(e,C,null,[t]).length},it.contains=function(t,e){return(t.ownerDocument||t)!==C&&T(t),y(t,e)},it.attr=function(t,e){(t.ownerDocument||t)!==C&&T(t);var n=x.attrHandle[e.toLowerCase()],i=n&&D.call(x.attrHandle,e.toLowerCase())?n(t,e,!E):void 0;return void 0!==i?i:h.attributes||!E?t.getAttribute(e):(i=t.getAttributeNode(e))&&i.specified?i.value:null},it.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},it.uniqueSort=function(t){var e,n=[],i=0,o=0;if(u=!h.detectDuplicates,l=!h.sortStable&&t.slice(0),t.sort(N),u){for(;e=t[o++];)e===t[o]&&(i=n.push(o));for(;i--;)t.splice(n[i],1)}return l=null,t},r=it.getText=function(t){var e,n="",i=0,o=t.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof t.textContent)return t.textContent;for(t=t.firstChild;t;t=t.nextSibling)n+=r(t)}else if(3===o||4===o)return t.nodeValue}else for(;e=t[i++];)n+=r(e);return n},(x=it.selectors={cacheLength:50,createPseudo:rt,match:X,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(tt,et),t[3]=(t[3]||t[4]||t[5]||"").replace(tt,et),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||it.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&it.error(t[0]),t},PSEUDO:function(t){var e,n=!t[6]&&t[2];return X.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":n&&z.test(n)&&(e=g(n,!0))&&(e=n.indexOf(")",n.length-e)-n.length)&&(t[0]=t[0].slice(0,e),t[2]=n.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(tt,et).toLowerCase();return"*"===t?function(){return!0}:function(t){return t.nodeName&&t.nodeName.toLowerCase()===e}},CLASS:function(t){var e=p[t+" "];return e||(e=new RegExp("(^|"+q+")"+t+"("+q+"|$)"))&&p(t,function(t){return e.test("string"==typeof t.className&&t.className||void 0!==t.getAttribute&&t.getAttribute("class")||"")})},ATTR:function(n,i,o){return function(t){var e=it.attr(t,n);return null==e?"!="===i:!i||(e+="","="===i?e===o:"!="===i?e!==o:"^="===i?o&&0===e.indexOf(o):"*="===i?o&&-1<e.indexOf(o):"$="===i?o&&e.slice(-o.length)===o:"~="===i?-1<(" "+e.replace(W," ")+" ").indexOf(o):"|="===i&&(e===o||e.slice(0,o.length+1)===o+"-"))}},CHILD:function(h,t,e,g,m){var v="nth"!==h.slice(0,3),y="last"!==h.slice(-4),b="of-type"===t;return 1===g&&0===m?function(t){return!!t.parentNode}:function(t,e,n){var i,o,r,s,a,l,u=v!==y?"nextSibling":"previousSibling",c=t.parentNode,f=b&&t.nodeName.toLowerCase(),p=!n&&!b,d=!1;if(c){if(v){for(;u;){for(s=t;s=s[u];)if(b?s.nodeName.toLowerCase()===f:1===s.nodeType)return!1;l=u="only"===h&&!l&&"nextSibling"}return!0}if(l=[y?c.firstChild:c.lastChild],y&&p){for(d=(a=(i=(o=(r=(s=c)[S]||(s[S]={}))[s.uniqueID]||(r[s.uniqueID]={}))[h]||[])[0]===$&&i[1])&&i[2],s=a&&c.childNodes[a];s=++a&&s&&s[u]||(d=a=0)||l.pop();)if(1===s.nodeType&&++d&&s===t){o[h]=[$,a,d];break}}else if(p&&(d=a=(i=(o=(r=(s=t)[S]||(s[S]={}))[s.uniqueID]||(r[s.uniqueID]={}))[h]||[])[0]===$&&i[1]),!1===d)for(;(s=++a&&s&&s[u]||(d=a=0)||l.pop())&&((b?s.nodeName.toLowerCase()!==f:1!==s.nodeType)||!++d||(p&&((o=(r=s[S]||(s[S]={}))[s.uniqueID]||(r[s.uniqueID]={}))[h]=[$,d]),s!==t)););return(d-=m)===g||d%g==0&&0<=d/g}}},PSEUDO:function(t,r){var e,s=x.pseudos[t]||x.setFilters[t.toLowerCase()]||it.error("unsupported pseudo: "+t);return s[S]?s(r):1<s.length?(e=[t,t,"",r],x.setFilters.hasOwnProperty(t.toLowerCase())?rt(function(t,e){for(var n,i=s(t,r),o=i.length;o--;)t[n=L(t,i[o])]=!(e[n]=i[o])}):function(t){return s(t,0,e)}):s}},pseudos:{not:rt(function(t){var i=[],o=[],a=f(t.replace(M,"$1"));return a[S]?rt(function(t,e,n,i){for(var o,r=a(t,null,i,[]),s=t.length;s--;)(o=r[s])&&(t[s]=!(e[s]=o))}):function(t,e,n){return i[0]=t,a(i,null,n,o),i[0]=null,!o.pop()}}),has:rt(function(e){return function(t){return 0<it(e,t).length}}),contains:rt(function(e){return e=e.replace(tt,et),function(t){return-1<(t.textContent||t.innerText||r(t)).indexOf(e)}}),lang:rt(function(n){return V.test(n||"")||it.error("unsupported lang: "+n),n=n.replace(tt,et).toLowerCase(),function(t){var e;do{if(e=E?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(e=e.toLowerCase())===n||0===e.indexOf(n+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var e=n.location&&n.location.hash;return e&&e.slice(1)===t.id},root:function(t){return t===s},focus:function(t){return t===C.activeElement&&(!C.hasFocus||C.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},enabled:function(t){return!1===t.disabled},disabled:function(t){return!0===t.disabled},checked:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&!!t.checked||"option"===e&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,!0===t.selected},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!x.pseudos.empty(t)},header:function(t){return Y.test(t.nodeName)},input:function(t){return Q.test(t.nodeName)},button:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&"button"===t.type||"button"===e},text:function(t){var e;return"input"===t.nodeName.toLowerCase()&&"text"===t.type&&(null==(e=t.getAttribute("type"))||"text"===e.toLowerCase())},first:ft(function(){return[0]}),last:ft(function(t,e){return[e-1]}),eq:ft(function(t,e,n){return[n<0?n+e:n]}),even:ft(function(t,e){for(var n=0;n<e;n+=2)t.push(n);return t}),odd:ft(function(t,e){for(var n=1;n<e;n+=2)t.push(n);return t}),lt:ft(function(t,e,n){for(var i=n<0?n+e:n;0<=--i;)t.push(i);return t}),gt:ft(function(t,e,n){for(var i=n<0?n+e:n;++i<e;)t.push(i);return t})}}).pseudos.nth=x.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})x.pseudos[t]=ut(t);for(t in{submit:!0,reset:!0})x.pseudos[t]=ct(t);function dt(){}function ht(t){for(var e=0,n=t.length,i="";e<n;e++)i+=t[e].value;return i}function gt(a,t,e){var l=t.dir,u=e&&"parentNode"===l,c=i++;return t.first?function(t,e,n){for(;t=t[l];)if(1===t.nodeType||u)return a(t,e,n)}:function(t,e,n){var i,o,r,s=[$,c];if(n){for(;t=t[l];)if((1===t.nodeType||u)&&a(t,e,n))return!0}else for(;t=t[l];)if(1===t.nodeType||u){if((i=(o=(r=t[S]||(t[S]={}))[t.uniqueID]||(r[t.uniqueID]={}))[l])&&i[0]===$&&i[1]===c)return s[2]=i[2];if((o[l]=s)[2]=a(t,e,n))return!0}}}function mt(o){return 1<o.length?function(t,e,n){for(var i=o.length;i--;)if(!o[i](t,e,n))return!1;return!0}:o[0]}function vt(t,e,n,i,o){for(var r,s=[],a=0,l=t.length,u=null!=e;a<l;a++)(r=t[a])&&(n&&!n(r,i,o)||(s.push(r),u&&e.push(a)));return s}function yt(d,h,g,m,v,t){return m&&!m[S]&&(m=yt(m)),v&&!v[S]&&(v=yt(v,t)),rt(function(t,e,n,i){var o,r,s,a=[],l=[],u=e.length,c=t||function(t,e,n){for(var i=0,o=e.length;i<o;i++)it(t,e[i],n);return n}(h||"*",n.nodeType?[n]:n,[]),f=!d||!t&&h?c:vt(c,a,d,n,i),p=g?v||(t?d:u||m)?[]:e:f;if(g&&g(f,p,n,i),m)for(o=vt(p,l),m(o,[],n,i),r=o.length;r--;)(s=o[r])&&(p[l[r]]=!(f[l[r]]=s));if(t){if(v||d){if(v){for(o=[],r=p.length;r--;)(s=p[r])&&o.push(f[r]=s);v(null,p=[],o,i)}for(r=p.length;r--;)(s=p[r])&&-1<(o=v?L(t,s):a[r])&&(t[o]=!(e[o]=s))}}else p=vt(p===e?p.splice(u,p.length):p),v?v(null,e,p,i):O.apply(e,p)})}function bt(t){for(var o,e,n,i=t.length,r=x.relative[t[0].type],s=r||x.relative[" "],a=r?1:0,l=gt(function(t){return t===o},s,!0),u=gt(function(t){return-1<L(o,t)},s,!0),c=[function(t,e,n){var i=!r&&(n||e!==w)||((o=e).nodeType?l(t,e,n):u(t,e,n));return o=null,i}];a<i;a++)if(e=x.relative[t[a].type])c=[gt(mt(c),e)];else{if((e=x.filter[t[a].type].apply(null,t[a].matches))[S]){for(n=++a;n<i&&!x.relative[t[n].type];n++);return yt(1<a&&mt(c),1<a&&ht(t.slice(0,a-1).concat({value:" "===t[a-2].type?"*":""})).replace(M,"$1"),e,a<n&&bt(t.slice(a,n)),n<i&&bt(t=t.slice(n)),n<i&&ht(t))}c.push(e)}return mt(c)}return dt.prototype=x.filters=x.pseudos,x.setFilters=new dt,g=it.tokenize=function(t,e){var n,i,o,r,s,a,l,u=d[t+" "];if(u)return e?0:u.slice(0);for(s=t,a=[],l=x.preFilter;s;){for(r in n&&!(i=B.exec(s))||(i&&(s=s.slice(i[0].length)||s),a.push(o=[])),n=!1,(i=U.exec(s))&&(n=i.shift(),o.push({value:n,type:i[0].replace(M," ")}),s=s.slice(n.length)),x.filter)!(i=X[r].exec(s))||l[r]&&!(i=l[r](i))||(n=i.shift(),o.push({value:n,type:r,matches:i}),s=s.slice(n.length));if(!n)break}return e?s.length:s?it.error(t):d(t,a).slice(0)},f=it.compile=function(t,e){var n,m,v,y,b,i,o=[],r=[],s=k[t+" "];if(!s){for(e||(e=g(t)),n=e.length;n--;)(s=bt(e[n]))[S]?o.push(s):r.push(s);(s=k(t,(m=r,y=0<(v=o).length,b=0<m.length,i=function(t,e,n,i,o){var r,s,a,l=0,u="0",c=t&&[],f=[],p=w,d=t||b&&x.find.TAG("*",o),h=$+=null==p?1:Math.random()||.1,g=d.length;for(o&&(w=e===C||e||o);u!==g&&null!=(r=d[u]);u++){if(b&&r){for(s=0,e||r.ownerDocument===C||(T(r),n=!E);a=m[s++];)if(a(r,e||C,n)){i.push(r);break}o&&($=h)}y&&((r=!a&&r)&&l--,t&&c.push(r))}if(l+=u,y&&u!==l){for(s=0;a=v[s++];)a(c,f,e,n);if(t){if(0<l)for(;u--;)c[u]||f[u]||(f[u]=A.call(i));f=vt(f)}O.apply(i,f),o&&!t&&0<f.length&&1<l+v.length&&it.uniqueSort(i)}return o&&($=h,w=p),c},y?rt(i):i))).selector=t}return s},m=it.select=function(t,e,n,i){var o,r,s,a,l,u="function"==typeof t&&t,c=!i&&g(t=u.selector||t);if(n=n||[],1===c.length){if(2<(r=c[0]=c[0].slice(0)).length&&"ID"===(s=r[0]).type&&h.getById&&9===e.nodeType&&E&&x.relative[r[1].type]){if(!(e=(x.find.ID(s.matches[0].replace(tt,et),e)||[])[0]))return n;u&&(e=e.parentNode),t=t.slice(r.shift().value.length)}for(o=X.needsContext.test(t)?0:r.length;o--&&(s=r[o],!x.relative[a=s.type]);)if((l=x.find[a])&&(i=l(s.matches[0].replace(tt,et),K.test(r[0].type)&&pt(e.parentNode)||e))){if(r.splice(o,1),!(t=i.length&&ht(r)))return O.apply(n,i),n;break}}return(u||f(t,c))(i,e,!E,n,!e||K.test(t)&&pt(e.parentNode)||e),n},h.sortStable=S.split("").sort(N).join("")===S,h.detectDuplicates=!!u,T(),h.sortDetached=st(function(t){return 1&t.compareDocumentPosition(C.createElement("div"))}),st(function(t){return t.innerHTML="<a href='#'></a>","#"===t.firstChild.getAttribute("href")})||at("type|href|height|width",function(t,e,n){if(!n)return t.getAttribute(e,"type"===e.toLowerCase()?1:2)}),h.attributes&&st(function(t){return t.innerHTML="<input/>",t.firstChild.setAttribute("value",""),""===t.firstChild.getAttribute("value")})||at("value",function(t,e,n){if(!n&&"input"===t.nodeName.toLowerCase())return t.defaultValue}),st(function(t){return null==t.getAttribute("disabled")})||at(R,function(t,e,n){var i;if(!n)return!0===t[e]?e.toLowerCase():(i=t.getAttributeNode(e))&&i.specified?i.value:null}),it}(C);S.find=d,S.expr=d.selectors,S.expr[":"]=S.expr.pseudos,S.uniqueSort=S.unique=d.uniqueSort,S.text=d.getText,S.isXMLDoc=d.isXML,S.contains=d.contains;var v=function(t,e,n){for(var i=[],o=void 0!==n;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(o&&S(t).is(n))break;i.push(t)}return i},y=function(t,e){for(var n=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&n.push(t);return n},b=S.expr.match.needsContext,x=/^<([\w-]+)\s*\/?>(?:<\/\1>|)$/,w=/^.[^:#\[\.,]*$/;function T(t,n,i){if(S.isFunction(n))return S.grep(t,function(t,e){return!!n.call(t,e,t)!==i});if(n.nodeType)return S.grep(t,function(t){return t===n!==i});if("string"==typeof n){if(w.test(n))return S.filter(n,t,i);n=S.filter(n,t)}return S.grep(t,function(t){return-1<o.call(n,t)!==i})}S.filter=function(t,e,n){var i=e[0];return n&&(t=":not("+t+")"),1===e.length&&1===i.nodeType?S.find.matchesSelector(i,t)?[i]:[]:S.find.matches(t,S.grep(e,function(t){return 1===t.nodeType}))},S.fn.extend({find:function(t){var e,n=this.length,i=[],o=this;if("string"!=typeof t)return this.pushStack(S(t).filter(function(){for(e=0;e<n;e++)if(S.contains(o[e],this))return!0}));for(e=0;e<n;e++)S.find(t,o[e],i);return(i=this.pushStack(1<n?S.unique(i):i)).selector=this.selector?this.selector+" "+t:t,i},filter:function(t){return this.pushStack(T(this,t||[],!1))},not:function(t){return this.pushStack(T(this,t||[],!0))},is:function(t){return!!T(this,"string"==typeof t&&b.test(t)?S(t):t||[],!1).length}});var $,k=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/;(S.fn.init=function(t,e,n){var i,o;if(!t)return this;if(n=n||$,"string"==typeof t){if(!(i="<"===t[0]&&">"===t[t.length-1]&&3<=t.length?[null,t,null]:k.exec(t))||!i[1]&&e)return!e||e.jquery?(e||n).find(t):this.constructor(e).find(t);if(i[1]){if(e=e instanceof S?e[0]:e,S.merge(this,S.parseHTML(i[1],e&&e.nodeType?e.ownerDocument||e:E,!0)),x.test(i[1])&&S.isPlainObject(e))for(i in e)S.isFunction(this[i])?this[i](e[i]):this.attr(i,e[i]);return this}return(o=E.getElementById(i[2]))&&o.parentNode&&(this.length=1,this[0]=o),this.context=E,this.selector=t,this}return t.nodeType?(this.context=this[0]=t,this.length=1,this):S.isFunction(t)?void 0!==n.ready?n.ready(t):t(S):(void 0!==t.selector&&(this.selector=t.selector,this.context=t.context),S.makeArray(t,this))}).prototype=S.fn,$=S(E);var N=/^(?:parents|prev(?:Until|All))/,D={children:!0,contents:!0,next:!0,prev:!0};function A(t,e){for(;(t=t[e])&&1!==t.nodeType;);return t}S.fn.extend({has:function(t){var e=S(t,this),n=e.length;return this.filter(function(){for(var t=0;t<n;t++)if(S.contains(this,e[t]))return!0})},closest:function(t,e){for(var n,i=0,o=this.length,r=[],s=b.test(t)||"string"!=typeof t?S(t,e||this.context):0;i<o;i++)for(n=this[i];n&&n!==e;n=n.parentNode)if(n.nodeType<11&&(s?-1<s.index(n):1===n.nodeType&&S.find.matchesSelector(n,t))){r.push(n);break}return this.pushStack(1<r.length?S.uniqueSort(r):r)},index:function(t){return t?"string"==typeof t?o.call(S(t),this[0]):o.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(S.uniqueSort(S.merge(this.get(),S(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),S.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return v(t,"parentNode")},parentsUntil:function(t,e,n){return v(t,"parentNode",n)},next:function(t){return A(t,"nextSibling")},prev:function(t){return A(t,"previousSibling")},nextAll:function(t){return v(t,"nextSibling")},prevAll:function(t){return v(t,"previousSibling")},nextUntil:function(t,e,n){return v(t,"nextSibling",n)},prevUntil:function(t,e,n){return v(t,"previousSibling",n)},siblings:function(t){return y((t.parentNode||{}).firstChild,t)},children:function(t){return y(t.firstChild)},contents:function(t){return t.contentDocument||S.merge([],t.childNodes)}},function(i,o){S.fn[i]=function(t,e){var n=S.map(this,o,t);return"Until"!==i.slice(-5)&&(e=t),e&&"string"==typeof e&&(n=S.filter(e,n)),1<this.length&&(D[i]||S.uniqueSort(n),N.test(i)&&n.reverse()),this.pushStack(n)}});var j,O=/\S+/g;function I(){E.removeEventListener("DOMContentLoaded",I),C.removeEventListener("load",I),S.ready()}S.Callbacks=function(i){var t,n;i="string"==typeof i?(t=i,n={},S.each(t.match(O)||[],function(t,e){n[e]=!0}),n):S.extend({},i);var o,e,r,s,a=[],l=[],u=-1,c=function(){for(s=i.once,r=o=!0;l.length;u=-1)for(e=l.shift();++u<a.length;)!1===a[u].apply(e[0],e[1])&&i.stopOnFalse&&(u=a.length,e=!1);i.memory||(e=!1),o=!1,s&&(a=e?[]:"")},f={add:function(){return a&&(e&&!o&&(u=a.length-1,l.push(e)),function n(t){S.each(t,function(t,e){S.isFunction(e)?i.unique&&f.has(e)||a.push(e):e&&e.length&&"string"!==S.type(e)&&n(e)})}(arguments),e&&!o&&c()),this},remove:function(){return S.each(arguments,function(t,e){for(var n;-1<(n=S.inArray(e,a,n));)a.splice(n,1),n<=u&&u--}),this},has:function(t){return t?-1<S.inArray(t,a):0<a.length},empty:function(){return a&&(a=[]),this},disable:function(){return s=l=[],a=e="",this},disabled:function(){return!a},lock:function(){return s=l=[],e||(a=e=""),this},locked:function(){return!!s},fireWith:function(t,e){return s||(e=[t,(e=e||[]).slice?e.slice():e],l.push(e),o||c()),this},fire:function(){return f.fireWith(this,arguments),this},fired:function(){return!!r}};return f},S.extend({Deferred:function(t){var r=[["resolve","done",S.Callbacks("once memory"),"resolved"],["reject","fail",S.Callbacks("once memory"),"rejected"],["notify","progress",S.Callbacks("memory")]],o="pending",s={state:function(){return o},always:function(){return a.done(arguments).fail(arguments),this},then:function(){var o=arguments;return S.Deferred(function(i){S.each(r,function(t,e){var n=S.isFunction(o[t])&&o[t];a[e[1]](function(){var t=n&&n.apply(this,arguments);t&&S.isFunction(t.promise)?t.promise().progress(i.notify).done(i.resolve).fail(i.reject):i[e[0]+"With"](this===s?i.promise():this,n?[t]:arguments)})}),o=null}).promise()},promise:function(t){return null!=t?S.extend(t,s):s}},a={};return s.pipe=s.then,S.each(r,function(t,e){var n=e[2],i=e[3];s[e[1]]=n.add,i&&n.add(function(){o=i},r[1^t][2].disable,r[2][2].lock),a[e[0]]=function(){return a[e[0]+"With"](this===a?s:this,arguments),this},a[e[0]+"With"]=n.fireWith}),s.promise(a),t&&t.call(a,a),a},when:function(t){var o,e,n,i=0,r=c.call(arguments),s=r.length,a=1!==s||t&&S.isFunction(t.promise)?s:0,l=1===a?t:S.Deferred(),u=function(e,n,i){return function(t){n[e]=this,i[e]=1<arguments.length?c.call(arguments):t,i===o?l.notifyWith(n,i):--a||l.resolveWith(n,i)}};if(1<s)for(o=new Array(s),e=new Array(s),n=new Array(s);i<s;i++)r[i]&&S.isFunction(r[i].promise)?r[i].promise().progress(u(i,e,o)).done(u(i,n,r)).fail(l.reject):--a;return a||l.resolveWith(n,r),l.promise()}}),S.fn.ready=function(t){return S.ready.promise().done(t),this},S.extend({isReady:!1,readyWait:1,holdReady:function(t){t?S.readyWait++:S.ready(!0)},ready:function(t){(!0===t?--S.readyWait:S.isReady)||(S.isReady=!0)!==t&&0<--S.readyWait||(j.resolveWith(E,[S]),S.fn.triggerHandler&&(S(E).triggerHandler("ready"),S(E).off("ready")))}}),S.ready.promise=function(t){return j||(j=S.Deferred(),"complete"===E.readyState||"loading"!==E.readyState&&!E.documentElement.doScroll?C.setTimeout(S.ready):(E.addEventListener("DOMContentLoaded",I),C.addEventListener("load",I))),j.promise(t)},S.ready.promise();var L=function(t,e,n,i,o,r,s){var a=0,l=t.length,u=null==n;if("object"===S.type(n))for(a in o=!0,n)L(t,e,a,n[a],!0,r,s);else if(void 0!==i&&(o=!0,S.isFunction(i)||(s=!0),u&&(s?(e.call(t,i),e=null):(u=e,e=function(t,e,n){return u.call(S(t),n)})),e))for(;a<l;a++)e(t[a],n,s?i:i.call(t[a],a,e(t[a],n)));return o?t:u?e.call(t):l?e(t[0],n):r},R=function(t){return 1===t.nodeType||9===t.nodeType||!+t.nodeType};function q(){this.expando=S.expando+q.uid++}q.uid=1,q.prototype={register:function(t,e){var n=e||{};return t.nodeType?t[this.expando]=n:Object.defineProperty(t,this.expando,{value:n,writable:!0,configurable:!0}),t[this.expando]},cache:function(t){if(!R(t))return{};var e=t[this.expando];return e||(e={},R(t)&&(t.nodeType?t[this.expando]=e:Object.defineProperty(t,this.expando,{value:e,configurable:!0}))),e},set:function(t,e,n){var i,o=this.cache(t);if("string"==typeof e)o[e]=n;else for(i in e)o[i]=e[i];return o},get:function(t,e){return void 0===e?this.cache(t):t[this.expando]&&t[this.expando][e]},access:function(t,e,n){var i;return void 0===e||e&&"string"==typeof e&&void 0===n?void 0!==(i=this.get(t,e))?i:this.get(t,S.camelCase(e)):(this.set(t,e,n),void 0!==n?n:e)},remove:function(t,e){var n,i,o,r=t[this.expando];if(void 0!==r){if(void 0===e)this.register(t);else{S.isArray(e)?i=e.concat(e.map(S.camelCase)):(o=S.camelCase(e),i=e in r?[e,o]:(i=o)in r?[i]:i.match(O)||[]),n=i.length;for(;n--;)delete r[i[n]]}(void 0===e||S.isEmptyObject(r))&&(t.nodeType?t[this.expando]=void 0:delete t[this.expando])}},hasData:function(t){var e=t[this.expando];return void 0!==e&&!S.isEmptyObject(e)}};var H=new q,P=new q,F=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,W=/[A-Z]/g;function M(t,e,n){var i;if(void 0===n&&1===t.nodeType)if(i="data-"+e.replace(W,"-$&").toLowerCase(),"string"==typeof(n=t.getAttribute(i))){try{n="true"===n||"false"!==n&&("null"===n?null:+n+""===n?+n:F.test(n)?S.parseJSON(n):n)}catch(t){}P.set(t,e,n)}else n=void 0;return n}S.extend({hasData:function(t){return P.hasData(t)||H.hasData(t)},data:function(t,e,n){return P.access(t,e,n)},removeData:function(t,e){P.remove(t,e)},_data:function(t,e,n){return H.access(t,e,n)},_removeData:function(t,e){H.remove(t,e)}}),S.fn.extend({data:function(i,t){var e,n,o,r=this[0],s=r&&r.attributes;if(void 0===i){if(this.length&&(o=P.get(r),1===r.nodeType&&!H.get(r,"hasDataAttrs"))){for(e=s.length;e--;)s[e]&&0===(n=s[e].name).indexOf("data-")&&(n=S.camelCase(n.slice(5)),M(r,n,o[n]));H.set(r,"hasDataAttrs",!0)}return o}return"object"==typeof i?this.each(function(){P.set(this,i)}):L(this,function(e){var t,n;if(r&&void 0===e)return void 0!==(t=P.get(r,i)||P.get(r,i.replace(W,"-$&").toLowerCase()))?t:(n=S.camelCase(i),void 0!==(t=P.get(r,n))?t:void 0!==(t=M(r,n,void 0))?t:void 0);n=S.camelCase(i),this.each(function(){var t=P.get(this,n);P.set(this,n,e),-1<i.indexOf("-")&&void 0!==t&&P.set(this,i,e)})},null,t,1<arguments.length,null,!0)},removeData:function(t){return this.each(function(){P.remove(this,t)})}}),S.extend({queue:function(t,e,n){var i;if(t)return e=(e||"fx")+"queue",i=H.get(t,e),n&&(!i||S.isArray(n)?i=H.access(t,e,S.makeArray(n)):i.push(n)),i||[]},dequeue:function(t,e){e=e||"fx";var n=S.queue(t,e),i=n.length,o=n.shift(),r=S._queueHooks(t,e);"inprogress"===o&&(o=n.shift(),i--),o&&("fx"===e&&n.unshift("inprogress"),delete r.stop,o.call(t,function(){S.dequeue(t,e)},r)),!i&&r&&r.empty.fire()},_queueHooks:function(t,e){var n=e+"queueHooks";return H.get(t,n)||H.access(t,n,{empty:S.Callbacks("once memory").add(function(){H.remove(t,[e+"queue",n])})})}}),S.fn.extend({queue:function(e,n){var t=2;return"string"!=typeof e&&(n=e,e="fx",t--),arguments.length<t?S.queue(this[0],e):void 0===n?this:this.each(function(){var t=S.queue(this,e,n);S._queueHooks(this,e),"fx"===e&&"inprogress"!==t[0]&&S.dequeue(this,e)})},dequeue:function(t){return this.each(function(){S.dequeue(this,t)})},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){var n,i=1,o=S.Deferred(),r=this,s=this.length,a=function(){--i||o.resolveWith(r,[r])};for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";s--;)(n=H.get(r[s],t+"queueHooks"))&&n.empty&&(i++,n.empty.add(a));return a(),o.promise(e)}});var B=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,U=new RegExp("^(?:([+-])=|)("+B+")([a-z%]*)$","i"),_=["Top","Right","Bottom","Left"],z=function(t,e){return t=e||t,"none"===S.css(t,"display")||!S.contains(t.ownerDocument,t)};function V(t,e,n,i){var o,r=1,s=20,a=i?function(){return i.cur()}:function(){return S.css(t,e,"")},l=a(),u=n&&n[3]||(S.cssNumber[e]?"":"px"),c=(S.cssNumber[e]||"px"!==u&&+l)&&U.exec(S.css(t,e));if(c&&c[3]!==u)for(u=u||c[3],n=n||[],c=+l||1;c/=r=r||".5",S.style(t,e,c+u),r!==(r=a()/l)&&1!==r&&--s;);return n&&(c=+c||+l||0,o=n[1]?c+(n[1]+1)*n[2]:+n[2],i&&(i.unit=u,i.start=c,i.end=o)),o}var X=/^(?:checkbox|radio)$/i,Q=/<([\w:-]+)/,Y=/^$|\/(?:java|ecma)script/i,G={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function J(t,e){var n=void 0!==t.getElementsByTagName?t.getElementsByTagName(e||"*"):void 0!==t.querySelectorAll?t.querySelectorAll(e||"*"):[];return void 0===e||e&&S.nodeName(t,e)?S.merge([t],n):n}function K(t,e){for(var n=0,i=t.length;n<i;n++)H.set(t[n],"globalEval",!e||H.get(e[n],"globalEval"))}G.optgroup=G.option,G.tbody=G.tfoot=G.colgroup=G.caption=G.thead,G.th=G.td;var Z,tt,et=/<|&#?\w+;/;function nt(t,e,n,i,o){for(var r,s,a,l,u,c,f=e.createDocumentFragment(),p=[],d=0,h=t.length;d<h;d++)if((r=t[d])||0===r)if("object"===S.type(r))S.merge(p,r.nodeType?[r]:r);else if(et.test(r)){for(s=s||f.appendChild(e.createElement("div")),a=(Q.exec(r)||["",""])[1].toLowerCase(),l=G[a]||G._default,s.innerHTML=l[1]+S.htmlPrefilter(r)+l[2],c=l[0];c--;)s=s.lastChild;S.merge(p,s.childNodes),(s=f.firstChild).textContent=""}else p.push(e.createTextNode(r));for(f.textContent="",d=0;r=p[d++];)if(i&&-1<S.inArray(r,i))o&&o.push(r);else if(u=S.contains(r.ownerDocument,r),s=J(f.appendChild(r),"script"),u&&K(s),n)for(c=0;r=s[c++];)Y.test(r.type||"")&&n.push(r);return f}Z=E.createDocumentFragment().appendChild(E.createElement("div")),(tt=E.createElement("input")).setAttribute("type","radio"),tt.setAttribute("checked","checked"),tt.setAttribute("name","t"),Z.appendChild(tt),m.checkClone=Z.cloneNode(!0).cloneNode(!0).lastChild.checked,Z.innerHTML="<textarea>x</textarea>",m.noCloneChecked=!!Z.cloneNode(!0).lastChild.defaultValue;var it=/^key/,ot=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,rt=/^([^.]*)(?:\.(.+)|)/;function st(){return!0}function at(){return!1}function lt(){try{return E.activeElement}catch(t){}}function ut(t,e,n,i,o,r){var s,a;if("object"==typeof e){for(a in"string"!=typeof n&&(i=i||n,n=void 0),e)ut(t,a,n,i,e[a],r);return t}if(null==i&&null==o?(o=n,i=n=void 0):null==o&&("string"==typeof n?(o=i,i=void 0):(o=i,i=n,n=void 0)),!1===o)o=at;else if(!o)return t;return 1===r&&(s=o,(o=function(t){return S().off(t),s.apply(this,arguments)}).guid=s.guid||(s.guid=S.guid++)),t.each(function(){S.event.add(this,e,o,i,n)})}S.event={global:{},add:function(e,t,n,i,o){var r,s,a,l,u,c,f,p,d,h,g,m=H.get(e);if(m)for(n.handler&&(n=(r=n).handler,o=r.selector),n.guid||(n.guid=S.guid++),(l=m.events)||(l=m.events={}),(s=m.handle)||(s=m.handle=function(t){return void 0!==S&&S.event.triggered!==t.type?S.event.dispatch.apply(e,arguments):void 0}),u=(t=(t||"").match(O)||[""]).length;u--;)d=g=(a=rt.exec(t[u])||[])[1],h=(a[2]||"").split(".").sort(),d&&(f=S.event.special[d]||{},d=(o?f.delegateType:f.bindType)||d,f=S.event.special[d]||{},c=S.extend({type:d,origType:g,data:i,handler:n,guid:n.guid,selector:o,needsContext:o&&S.expr.match.needsContext.test(o),namespace:h.join(".")},r),(p=l[d])||((p=l[d]=[]).delegateCount=0,f.setup&&!1!==f.setup.call(e,i,h,s)||e.addEventListener&&e.addEventListener(d,s)),f.add&&(f.add.call(e,c),c.handler.guid||(c.handler.guid=n.guid)),o?p.splice(p.delegateCount++,0,c):p.push(c),S.event.global[d]=!0)},remove:function(t,e,n,i,o){var r,s,a,l,u,c,f,p,d,h,g,m=H.hasData(t)&&H.get(t);if(m&&(l=m.events)){for(u=(e=(e||"").match(O)||[""]).length;u--;)if(d=g=(a=rt.exec(e[u])||[])[1],h=(a[2]||"").split(".").sort(),d){for(f=S.event.special[d]||{},p=l[d=(i?f.delegateType:f.bindType)||d]||[],a=a[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=r=p.length;r--;)c=p[r],!o&&g!==c.origType||n&&n.guid!==c.guid||a&&!a.test(c.namespace)||i&&i!==c.selector&&("**"!==i||!c.selector)||(p.splice(r,1),c.selector&&p.delegateCount--,f.remove&&f.remove.call(t,c));s&&!p.length&&(f.teardown&&!1!==f.teardown.call(t,h,m.handle)||S.removeEvent(t,d,m.handle),delete l[d])}else for(d in l)S.event.remove(t,d+e[u],n,i,!0);S.isEmptyObject(l)&&H.remove(t,"handle events")}},dispatch:function(t){t=S.event.fix(t);var e,n,i,o,r,s,a=c.call(arguments),l=(H.get(this,"events")||{})[t.type]||[],u=S.event.special[t.type]||{};if((a[0]=t).delegateTarget=this,!u.preDispatch||!1!==u.preDispatch.call(this,t)){for(s=S.event.handlers.call(this,t,l),e=0;(o=s[e++])&&!t.isPropagationStopped();)for(t.currentTarget=o.elem,n=0;(r=o.handlers[n++])&&!t.isImmediatePropagationStopped();)t.rnamespace&&!t.rnamespace.test(r.namespace)||(t.handleObj=r,t.data=r.data,void 0!==(i=((S.event.special[r.origType]||{}).handle||r.handler).apply(o.elem,a))&&!1===(t.result=i)&&(t.preventDefault(),t.stopPropagation()));return u.postDispatch&&u.postDispatch.call(this,t),t.result}},handlers:function(t,e){var n,i,o,r,s=[],a=e.delegateCount,l=t.target;if(a&&l.nodeType&&("click"!==t.type||isNaN(t.button)||t.button<1))for(;l!==this;l=l.parentNode||this)if(1===l.nodeType&&(!0!==l.disabled||"click"!==t.type)){for(i=[],n=0;n<a;n++)void 0===i[o=(r=e[n]).selector+" "]&&(i[o]=r.needsContext?-1<S(o,this).index(l):S.find(o,this,null,[l]).length),i[o]&&i.push(r);i.length&&s.push({elem:l,handlers:i})}return a<e.length&&s.push({elem:this,handlers:e.slice(a)}),s},props:"altKey bubbles cancelable ctrlKey currentTarget detail eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(t,e){return null==t.which&&(t.which=null!=e.charCode?e.charCode:e.keyCode),t}},mouseHooks:{props:"button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(t,e){var n,i,o,r=e.button;return null==t.pageX&&null!=e.clientX&&(i=(n=t.target.ownerDocument||E).documentElement,o=n.body,t.pageX=e.clientX+(i&&i.scrollLeft||o&&o.scrollLeft||0)-(i&&i.clientLeft||o&&o.clientLeft||0),t.pageY=e.clientY+(i&&i.scrollTop||o&&o.scrollTop||0)-(i&&i.clientTop||o&&o.clientTop||0)),t.which||void 0===r||(t.which=1&r?1:2&r?3:4&r?2:0),t}},fix:function(t){if(t[S.expando])return t;var e,n,i,o=t.type,r=t,s=this.fixHooks[o];for(s||(this.fixHooks[o]=s=ot.test(o)?this.mouseHooks:it.test(o)?this.keyHooks:{}),i=s.props?this.props.concat(s.props):this.props,t=new S.Event(r),e=i.length;e--;)t[n=i[e]]=r[n];return t.target||(t.target=E),3===t.target.nodeType&&(t.target=t.target.parentNode),s.filter?s.filter(t,r):t},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==lt()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===lt()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&S.nodeName(this,"input"))return this.click(),!1},_default:function(t){return S.nodeName(t.target,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}}},S.removeEvent=function(t,e,n){t.removeEventListener&&t.removeEventListener(e,n)},S.Event=function(t,e){if(!(this instanceof S.Event))return new S.Event(t,e);t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&!1===t.returnValue?st:at):this.type=t,e&&S.extend(this,e),this.timeStamp=t&&t.timeStamp||S.now(),this[S.expando]=!0},S.Event.prototype={constructor:S.Event,isDefaultPrevented:at,isPropagationStopped:at,isImmediatePropagationStopped:at,isSimulated:!1,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=st,t&&!this.isSimulated&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=st,t&&!this.isSimulated&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=st,t&&!this.isSimulated&&t.stopImmediatePropagation(),this.stopPropagation()}},S.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(t,o){S.event.special[t]={delegateType:o,bindType:o,handle:function(t){var e,n=t.relatedTarget,i=t.handleObj;return n&&(n===this||S.contains(this,n))||(t.type=i.origType,e=i.handler.apply(this,arguments),t.type=o),e}}}),S.fn.extend({on:function(t,e,n,i){return ut(this,t,e,n,i)},one:function(t,e,n,i){return ut(this,t,e,n,i,1)},off:function(t,e,n){var i,o;if(t&&t.preventDefault&&t.handleObj)return i=t.handleObj,S(t.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"==typeof t){for(o in t)this.off(o,e,t[o]);return this}return!1!==e&&"function"!=typeof e||(n=e,e=void 0),!1===n&&(n=at),this.each(function(){S.event.remove(this,t,n,e)})}});var ct=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,ft=/<script|<style|<link/i,pt=/checked\s*(?:[^=]|=\s*.checked.)/i,dt=/^true\/(.*)/,ht=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function gt(t,e){return S.nodeName(t,"table")&&S.nodeName(11!==e.nodeType?e:e.firstChild,"tr")?t.getElementsByTagName("tbody")[0]||t.appendChild(t.ownerDocument.createElement("tbody")):t}function mt(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function vt(t){var e=dt.exec(t.type);return e?t.type=e[1]:t.removeAttribute("type"),t}function yt(t,e){var n,i,o,r,s,a,l,u;if(1===e.nodeType){if(H.hasData(t)&&(r=H.access(t),s=H.set(e,r),u=r.events))for(o in delete s.handle,s.events={},u)for(n=0,i=u[o].length;n<i;n++)S.event.add(e,o,u[o][n]);P.hasData(t)&&(a=P.access(t),l=S.extend({},a),P.set(e,l))}}function bt(n,i,o,r){i=g.apply([],i);var t,e,s,a,l,u,c=0,f=n.length,p=f-1,d=i[0],h=S.isFunction(d);if(h||1<f&&"string"==typeof d&&!m.checkClone&&pt.test(d))return n.each(function(t){var e=n.eq(t);h&&(i[0]=d.call(this,t,e.html())),bt(e,i,o,r)});if(f&&(e=(t=nt(i,n[0].ownerDocument,!1,n,r)).firstChild,1===t.childNodes.length&&(t=e),e||r)){for(a=(s=S.map(J(t,"script"),mt)).length;c<f;c++)l=t,c!==p&&(l=S.clone(l,!0,!0),a&&S.merge(s,J(l,"script"))),o.call(n[c],l,c);if(a)for(u=s[s.length-1].ownerDocument,S.map(s,vt),c=0;c<a;c++)l=s[c],Y.test(l.type||"")&&!H.access(l,"globalEval")&&S.contains(u,l)&&(l.src?S._evalUrl&&S._evalUrl(l.src):S.globalEval(l.textContent.replace(ht,"")))}return n}function xt(t,e,n){for(var i,o=e?S.filter(e,t):t,r=0;null!=(i=o[r]);r++)n||1!==i.nodeType||S.cleanData(J(i)),i.parentNode&&(n&&S.contains(i.ownerDocument,i)&&K(J(i,"script")),i.parentNode.removeChild(i));return t}S.extend({htmlPrefilter:function(t){return t.replace(ct,"<$1></$2>")},clone:function(t,e,n){var i,o,r,s,a,l,u,c=t.cloneNode(!0),f=S.contains(t.ownerDocument,t);if(!(m.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||S.isXMLDoc(t)))for(s=J(c),i=0,o=(r=J(t)).length;i<o;i++)a=r[i],l=s[i],void 0,"input"===(u=l.nodeName.toLowerCase())&&X.test(a.type)?l.checked=a.checked:"input"!==u&&"textarea"!==u||(l.defaultValue=a.defaultValue);if(e)if(n)for(r=r||J(t),s=s||J(c),i=0,o=r.length;i<o;i++)yt(r[i],s[i]);else yt(t,c);return 0<(s=J(c,"script")).length&&K(s,!f&&J(t,"script")),c},cleanData:function(t){for(var e,n,i,o=S.event.special,r=0;void 0!==(n=t[r]);r++)if(R(n)){if(e=n[H.expando]){if(e.events)for(i in e.events)o[i]?S.event.remove(n,i):S.removeEvent(n,i,e.handle);n[H.expando]=void 0}n[P.expando]&&(n[P.expando]=void 0)}}}),S.fn.extend({domManip:bt,detach:function(t){return xt(this,t,!0)},remove:function(t){return xt(this,t)},text:function(t){return L(this,function(t){return void 0===t?S.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=t)})},null,t,arguments.length)},append:function(){return bt(this,arguments,function(t){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||gt(this,t).appendChild(t)})},prepend:function(){return bt(this,arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=gt(this,t);e.insertBefore(t,e.firstChild)}})},before:function(){return bt(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this)})},after:function(){return bt(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)})},empty:function(){for(var t,e=0;null!=(t=this[e]);e++)1===t.nodeType&&(S.cleanData(J(t,!1)),t.textContent="");return this},clone:function(t,e){return t=null!=t&&t,e=null==e?t:e,this.map(function(){return S.clone(this,t,e)})},html:function(t){return L(this,function(t){var e=this[0]||{},n=0,i=this.length;if(void 0===t&&1===e.nodeType)return e.innerHTML;if("string"==typeof t&&!ft.test(t)&&!G[(Q.exec(t)||["",""])[1].toLowerCase()]){t=S.htmlPrefilter(t);try{for(;n<i;n++)1===(e=this[n]||{}).nodeType&&(S.cleanData(J(e,!1)),e.innerHTML=t);e=0}catch(t){}}e&&this.empty().append(t)},null,t,arguments.length)},replaceWith:function(){var n=[];return bt(this,arguments,function(t){var e=this.parentNode;S.inArray(this,n)<0&&(S.cleanData(J(this)),e&&e.replaceChild(t,this))},n)}}),S.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(t,s){S.fn[t]=function(t){for(var e,n=[],i=S(t),o=i.length-1,r=0;r<=o;r++)e=r===o?this:this.clone(!0),S(i[r])[s](e),a.apply(n,e.get());return this.pushStack(n)}});var wt,Tt={HTML:"block",BODY:"block"};function Ct(t,e){var n=S(e.createElement(t)).appendTo(e.body),i=S.css(n[0],"display");return n.detach(),i}function Et(t){var e=E,n=Tt[t];return n||("none"!==(n=Ct(t,e))&&n||((e=(wt=(wt||S("<iframe frameborder='0' width='0' height='0'/>")).appendTo(e.documentElement))[0].contentDocument).write(),e.close(),n=Ct(t,e),wt.detach()),Tt[t]=n),n}var St=/^margin/,$t=new RegExp("^("+B+")(?!px)[a-z%]+$","i"),kt=function(t){var e=t.ownerDocument.defaultView;return e&&e.opener||(e=C),e.getComputedStyle(t)},Nt=function(t,e,n,i){var o,r,s={};for(r in e)s[r]=t.style[r],t.style[r]=e[r];for(r in o=n.apply(t,i||[]),e)t.style[r]=s[r];return o},Dt=E.documentElement;function At(t,e,n){var i,o,r,s,a=t.style;return""!==(s=(n=n||kt(t))?n.getPropertyValue(e)||n[e]:void 0)&&void 0!==s||S.contains(t.ownerDocument,t)||(s=S.style(t,e)),n&&!m.pixelMarginRight()&&$t.test(s)&&St.test(e)&&(i=a.width,o=a.minWidth,r=a.maxWidth,a.minWidth=a.maxWidth=a.width=s,s=n.width,a.width=i,a.minWidth=o,a.maxWidth=r),void 0!==s?s+"":s}function jt(t,e){return{get:function(){if(!t())return(this.get=e).apply(this,arguments);delete this.get}}}!function(){var e,n,i,o,r=E.createElement("div"),s=E.createElement("div");function t(){s.style.cssText="-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",s.innerHTML="",Dt.appendChild(r);var t=C.getComputedStyle(s);e="1%"!==t.top,o="2px"===t.marginLeft,n="4px"===t.width,s.style.marginRight="50%",i="4px"===t.marginRight,Dt.removeChild(r)}s.style&&(s.style.backgroundClip="content-box",s.cloneNode(!0).style.backgroundClip="",m.clearCloneStyle="content-box"===s.style.backgroundClip,r.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",r.appendChild(s),S.extend(m,{pixelPosition:function(){return t(),e},boxSizingReliable:function(){return null==n&&t(),n},pixelMarginRight:function(){return null==n&&t(),i},reliableMarginLeft:function(){return null==n&&t(),o},reliableMarginRight:function(){var t,e=s.appendChild(E.createElement("div"));return e.style.cssText=s.style.cssText="-webkit-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",e.style.marginRight=e.style.width="0",s.style.width="1px",Dt.appendChild(r),t=!parseFloat(C.getComputedStyle(e).marginRight),Dt.removeChild(r),s.removeChild(e),t}}))}();var Ot=/^(none|table(?!-c[ea]).+)/,It={position:"absolute",visibility:"hidden",display:"block"},Lt={letterSpacing:"0",fontWeight:"400"},Rt=["Webkit","O","Moz","ms"],qt=E.createElement("div").style;function Ht(t){if(t in qt)return t;for(var e=t[0].toUpperCase()+t.slice(1),n=Rt.length;n--;)if((t=Rt[n]+e)in qt)return t}function Pt(t,e,n){var i=U.exec(e);return i?Math.max(0,i[2]-(n||0))+(i[3]||"px"):e}function Ft(t,e,n,i,o){for(var r=n===(i?"border":"content")?4:"width"===e?1:0,s=0;r<4;r+=2)"margin"===n&&(s+=S.css(t,n+_[r],!0,o)),i?("content"===n&&(s-=S.css(t,"padding"+_[r],!0,o)),"margin"!==n&&(s-=S.css(t,"border"+_[r]+"Width",!0,o))):(s+=S.css(t,"padding"+_[r],!0,o),"padding"!==n&&(s+=S.css(t,"border"+_[r]+"Width",!0,o)));return s}function Wt(t,e,n){var i=!0,o="width"===e?t.offsetWidth:t.offsetHeight,r=kt(t),s="border-box"===S.css(t,"boxSizing",!1,r);if(o<=0||null==o){if(((o=At(t,e,r))<0||null==o)&&(o=t.style[e]),$t.test(o))return o;i=s&&(m.boxSizingReliable()||o===t.style[e]),o=parseFloat(o)||0}return o+Ft(t,e,n||(s?"border":"content"),i,r)+"px"}function Mt(t,e){for(var n,i,o,r=[],s=0,a=t.length;s<a;s++)(i=t[s]).style&&(r[s]=H.get(i,"olddisplay"),n=i.style.display,e?(r[s]||"none"!==n||(i.style.display=""),""===i.style.display&&z(i)&&(r[s]=H.access(i,"olddisplay",Et(i.nodeName)))):(o=z(i),"none"===n&&o||H.set(i,"olddisplay",o?n:S.css(i,"display"))));for(s=0;s<a;s++)(i=t[s]).style&&(e&&"none"!==i.style.display&&""!==i.style.display||(i.style.display=e?r[s]||"":"none"));return t}function Bt(t,e,n,i,o){return new Bt.prototype.init(t,e,n,i,o)}S.extend({cssHooks:{opacity:{get:function(t,e){if(e){var n=At(t,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{float:"cssFloat"},style:function(t,e,n,i){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var o,r,s,a=S.camelCase(e),l=t.style;if(e=S.cssProps[a]||(S.cssProps[a]=Ht(a)||a),s=S.cssHooks[e]||S.cssHooks[a],void 0===n)return s&&"get"in s&&void 0!==(o=s.get(t,!1,i))?o:l[e];"string"===(r=typeof n)&&(o=U.exec(n))&&o[1]&&(n=V(t,e,o),r="number"),null!=n&&n==n&&("number"===r&&(n+=o&&o[3]||(S.cssNumber[a]?"":"px")),m.clearCloneStyle||""!==n||0!==e.indexOf("background")||(l[e]="inherit"),s&&"set"in s&&void 0===(n=s.set(t,n,i))||(l[e]=n))}},css:function(t,e,n,i){var o,r,s,a=S.camelCase(e);return e=S.cssProps[a]||(S.cssProps[a]=Ht(a)||a),(s=S.cssHooks[e]||S.cssHooks[a])&&"get"in s&&(o=s.get(t,!0,n)),void 0===o&&(o=At(t,e,i)),"normal"===o&&e in Lt&&(o=Lt[e]),""===n||n?(r=parseFloat(o),!0===n||isFinite(r)?r||0:o):o}}),S.each(["height","width"],function(t,s){S.cssHooks[s]={get:function(t,e,n){if(e)return Ot.test(S.css(t,"display"))&&0===t.offsetWidth?Nt(t,It,function(){return Wt(t,s,n)}):Wt(t,s,n)},set:function(t,e,n){var i,o=n&&kt(t),r=n&&Ft(t,s,n,"border-box"===S.css(t,"boxSizing",!1,o),o);return r&&(i=U.exec(e))&&"px"!==(i[3]||"px")&&(t.style[s]=e,e=S.css(t,s)),Pt(0,e,r)}}}),S.cssHooks.marginLeft=jt(m.reliableMarginLeft,function(t,e){if(e)return(parseFloat(At(t,"marginLeft"))||t.getBoundingClientRect().left-Nt(t,{marginLeft:0},function(){return t.getBoundingClientRect().left}))+"px"}),S.cssHooks.marginRight=jt(m.reliableMarginRight,function(t,e){if(e)return Nt(t,{display:"inline-block"},At,[t,"marginRight"])}),S.each({margin:"",padding:"",border:"Width"},function(o,r){S.cssHooks[o+r]={expand:function(t){for(var e=0,n={},i="string"==typeof t?t.split(" "):[t];e<4;e++)n[o+_[e]+r]=i[e]||i[e-2]||i[0];return n}},St.test(o)||(S.cssHooks[o+r].set=Pt)}),S.fn.extend({css:function(t,e){return L(this,function(t,e,n){var i,o,r={},s=0;if(S.isArray(e)){for(i=kt(t),o=e.length;s<o;s++)r[e[s]]=S.css(t,e[s],!1,i);return r}return void 0!==n?S.style(t,e,n):S.css(t,e)},t,e,1<arguments.length)},show:function(){return Mt(this,!0)},hide:function(){return Mt(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each(function(){z(this)?S(this).show():S(this).hide()})}}),((S.Tween=Bt).prototype={constructor:Bt,init:function(t,e,n,i,o,r){this.elem=t,this.prop=n,this.easing=o||S.easing._default,this.options=e,this.start=this.now=this.cur(),this.end=i,this.unit=r||(S.cssNumber[n]?"":"px")},cur:function(){var t=Bt.propHooks[this.prop];return t&&t.get?t.get(this):Bt.propHooks._default.get(this)},run:function(t){var e,n=Bt.propHooks[this.prop];return this.options.duration?this.pos=e=S.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=e=t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):Bt.propHooks._default.set(this),this}}).init.prototype=Bt.prototype,(Bt.propHooks={_default:{get:function(t){var e;return 1!==t.elem.nodeType||null!=t.elem[t.prop]&&null==t.elem.style[t.prop]?t.elem[t.prop]:(e=S.css(t.elem,t.prop,""))&&"auto"!==e?e:0},set:function(t){S.fx.step[t.prop]?S.fx.step[t.prop](t):1!==t.elem.nodeType||null==t.elem.style[S.cssProps[t.prop]]&&!S.cssHooks[t.prop]?t.elem[t.prop]=t.now:S.style(t.elem,t.prop,t.now+t.unit)}}}).scrollTop=Bt.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},S.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2},_default:"swing"},S.fx=Bt.prototype.init,S.fx.step={};var Ut,_t,zt,Vt,Xt,Qt=/^(?:toggle|show|hide)$/,Yt=/queueHooks$/;function Gt(){return C.setTimeout(function(){Ut=void 0}),Ut=S.now()}function Jt(t,e){var n,i=0,o={height:t};for(e=e?1:0;i<4;i+=2-e)o["margin"+(n=_[i])]=o["padding"+n]=t;return e&&(o.opacity=o.width=t),o}function Kt(t,e,n){for(var i,o=(Zt.tweeners[e]||[]).concat(Zt.tweeners["*"]),r=0,s=o.length;r<s;r++)if(i=o[r].call(n,e,t))return i}function Zt(r,t,e){var n,s,i=0,o=Zt.prefilters.length,a=S.Deferred().always(function(){delete l.elem}),l=function(){if(s)return!1;for(var t=Ut||Gt(),e=Math.max(0,u.startTime+u.duration-t),n=1-(e/u.duration||0),i=0,o=u.tweens.length;i<o;i++)u.tweens[i].run(n);return a.notifyWith(r,[u,n,e]),n<1&&o?e:(a.resolveWith(r,[u]),!1)},u=a.promise({elem:r,props:S.extend({},t),opts:S.extend(!0,{specialEasing:{},easing:S.easing._default},e),originalProperties:t,originalOptions:e,startTime:Ut||Gt(),duration:e.duration,tweens:[],createTween:function(t,e){var n=S.Tween(r,u.opts,t,e,u.opts.specialEasing[t]||u.opts.easing);return u.tweens.push(n),n},stop:function(t){var e=0,n=t?u.tweens.length:0;if(s)return this;for(s=!0;e<n;e++)u.tweens[e].run(1);return t?(a.notifyWith(r,[u,1,0]),a.resolveWith(r,[u,t])):a.rejectWith(r,[u,t]),this}}),c=u.props;for(!function(t,e){var n,i,o,r,s;for(n in t)if(o=e[i=S.camelCase(n)],r=t[n],S.isArray(r)&&(o=r[1],r=t[n]=r[0]),n!==i&&(t[i]=r,delete t[n]),(s=S.cssHooks[i])&&"expand"in s)for(n in r=s.expand(r),delete t[i],r)n in t||(t[n]=r[n],e[n]=o);else e[i]=o}(c,u.opts.specialEasing);i<o;i++)if(n=Zt.prefilters[i].call(u,r,c,u.opts))return S.isFunction(n.stop)&&(S._queueHooks(u.elem,u.opts.queue).stop=S.proxy(n.stop,n)),n;return S.map(c,Kt,u),S.isFunction(u.opts.start)&&u.opts.start.call(r,u),S.fx.timer(S.extend(l,{elem:r,anim:u,queue:u.opts.queue})),u.progress(u.opts.progress).done(u.opts.done,u.opts.complete).fail(u.opts.fail).always(u.opts.always)}S.Animation=S.extend(Zt,{tweeners:{"*":[function(t,e){var n=this.createTween(t,e);return V(n.elem,t,U.exec(e),n),n}]},tweener:function(t,e){S.isFunction(t)?(e=t,t=["*"]):t=t.match(O);for(var n,i=0,o=t.length;i<o;i++)n=t[i],Zt.tweeners[n]=Zt.tweeners[n]||[],Zt.tweeners[n].unshift(e)},prefilters:[function(e,t,n){var i,o,r,s,a,l,u,c=this,f={},p=e.style,d=e.nodeType&&z(e),h=H.get(e,"fxshow");for(i in n.queue||(null==(a=S._queueHooks(e,"fx")).unqueued&&(a.unqueued=0,l=a.empty.fire,a.empty.fire=function(){a.unqueued||l()}),a.unqueued++,c.always(function(){c.always(function(){a.unqueued--,S.queue(e,"fx").length||a.empty.fire()})})),1===e.nodeType&&("height"in t||"width"in t)&&(n.overflow=[p.overflow,p.overflowX,p.overflowY],"inline"===("none"===(u=S.css(e,"display"))?H.get(e,"olddisplay")||Et(e.nodeName):u)&&"none"===S.css(e,"float")&&(p.display="inline-block")),n.overflow&&(p.overflow="hidden",c.always(function(){p.overflow=n.overflow[0],p.overflowX=n.overflow[1],p.overflowY=n.overflow[2]})),t)if(o=t[i],Qt.exec(o)){if(delete t[i],r=r||"toggle"===o,o===(d?"hide":"show")){if("show"!==o||!h||void 0===h[i])continue;d=!0}f[i]=h&&h[i]||S.style(e,i)}else u=void 0;if(S.isEmptyObject(f))"inline"===("none"===u?Et(e.nodeName):u)&&(p.display=u);else for(i in h?"hidden"in h&&(d=h.hidden):h=H.access(e,"fxshow",{}),r&&(h.hidden=!d),d?S(e).show():c.done(function(){S(e).hide()}),c.done(function(){var t;for(t in H.remove(e,"fxshow"),f)S.style(e,t,f[t])}),f)s=Kt(d?h[i]:0,i,c),i in h||(h[i]=s.start,d&&(s.end=s.start,s.start="width"===i||"height"===i?1:0))}],prefilter:function(t,e){e?Zt.prefilters.unshift(t):Zt.prefilters.push(t)}}),S.speed=function(t,e,n){var i=t&&"object"==typeof t?S.extend({},t):{complete:n||!n&&e||S.isFunction(t)&&t,duration:t,easing:n&&e||e&&!S.isFunction(e)&&e};return i.duration=S.fx.off?0:"number"==typeof i.duration?i.duration:i.duration in S.fx.speeds?S.fx.speeds[i.duration]:S.fx.speeds._default,null!=i.queue&&!0!==i.queue||(i.queue="fx"),i.old=i.complete,i.complete=function(){S.isFunction(i.old)&&i.old.call(this),i.queue&&S.dequeue(this,i.queue)},i},S.fn.extend({fadeTo:function(t,e,n,i){return this.filter(z).css("opacity",0).show().end().animate({opacity:e},t,n,i)},animate:function(e,t,n,i){var o=S.isEmptyObject(e),r=S.speed(t,n,i),s=function(){var t=Zt(this,S.extend({},e),r);(o||H.get(this,"finish"))&&t.stop(!0)};return s.finish=s,o||!1===r.queue?this.each(s):this.queue(r.queue,s)},stop:function(o,t,r){var s=function(t){var e=t.stop;delete t.stop,e(r)};return"string"!=typeof o&&(r=t,t=o,o=void 0),t&&!1!==o&&this.queue(o||"fx",[]),this.each(function(){var t=!0,e=null!=o&&o+"queueHooks",n=S.timers,i=H.get(this);if(e)i[e]&&i[e].stop&&s(i[e]);else for(e in i)i[e]&&i[e].stop&&Yt.test(e)&&s(i[e]);for(e=n.length;e--;)n[e].elem!==this||null!=o&&n[e].queue!==o||(n[e].anim.stop(r),t=!1,n.splice(e,1));!t&&r||S.dequeue(this,o)})},finish:function(s){return!1!==s&&(s=s||"fx"),this.each(function(){var t,e=H.get(this),n=e[s+"queue"],i=e[s+"queueHooks"],o=S.timers,r=n?n.length:0;for(e.finish=!0,S.queue(this,s,[]),i&&i.stop&&i.stop.call(this,!0),t=o.length;t--;)o[t].elem===this&&o[t].queue===s&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;t<r;t++)n[t]&&n[t].finish&&n[t].finish.call(this);delete e.finish})}}),S.each(["toggle","show","hide"],function(t,i){var o=S.fn[i];S.fn[i]=function(t,e,n){return null==t||"boolean"==typeof t?o.apply(this,arguments):this.animate(Jt(i,!0),t,e,n)}}),S.each({slideDown:Jt("show"),slideUp:Jt("hide"),slideToggle:Jt("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(t,i){S.fn[t]=function(t,e,n){return this.animate(i,t,e,n)}}),S.timers=[],S.fx.tick=function(){var t,e=0,n=S.timers;for(Ut=S.now();e<n.length;e++)(t=n[e])()||n[e]!==t||n.splice(e--,1);n.length||S.fx.stop(),Ut=void 0},S.fx.timer=function(t){S.timers.push(t),t()?S.fx.start():S.timers.pop()},S.fx.interval=13,S.fx.start=function(){_t||(_t=C.setInterval(S.fx.tick,S.fx.interval))},S.fx.stop=function(){C.clearInterval(_t),_t=null},S.fx.speeds={slow:600,fast:200,_default:400},S.fn.delay=function(i,t){return i=S.fx&&S.fx.speeds[i]||i,t=t||"fx",this.queue(t,function(t,e){var n=C.setTimeout(t,i);e.stop=function(){C.clearTimeout(n)}})},zt=E.createElement("input"),Vt=E.createElement("select"),Xt=Vt.appendChild(E.createElement("option")),zt.type="checkbox",m.checkOn=""!==zt.value,m.optSelected=Xt.selected,Vt.disabled=!0,m.optDisabled=!Xt.disabled,(zt=E.createElement("input")).value="t",zt.type="radio",m.radioValue="t"===zt.value;var te,ee=S.expr.attrHandle;S.fn.extend({attr:function(t,e){return L(this,S.attr,t,e,1<arguments.length)},removeAttr:function(t){return this.each(function(){S.removeAttr(this,t)})}}),S.extend({attr:function(t,e,n){var i,o,r=t.nodeType;if(3!==r&&8!==r&&2!==r)return void 0===t.getAttribute?S.prop(t,e,n):(1===r&&S.isXMLDoc(t)||(e=e.toLowerCase(),o=S.attrHooks[e]||(S.expr.match.bool.test(e)?te:void 0)),void 0!==n?null===n?void S.removeAttr(t,e):o&&"set"in o&&void 0!==(i=o.set(t,n,e))?i:(t.setAttribute(e,n+""),n):o&&"get"in o&&null!==(i=o.get(t,e))?i:null==(i=S.find.attr(t,e))?void 0:i)},attrHooks:{type:{set:function(t,e){if(!m.radioValue&&"radio"===e&&S.nodeName(t,"input")){var n=t.value;return t.setAttribute("type",e),n&&(t.value=n),e}}}},removeAttr:function(t,e){var n,i,o=0,r=e&&e.match(O);if(r&&1===t.nodeType)for(;n=r[o++];)i=S.propFix[n]||n,S.expr.match.bool.test(n)&&(t[i]=!1),t.removeAttribute(n)}}),te={set:function(t,e,n){return!1===e?S.removeAttr(t,n):t.setAttribute(n,n),n}},S.each(S.expr.match.bool.source.match(/\w+/g),function(t,e){var r=ee[e]||S.find.attr;ee[e]=function(t,e,n){var i,o;return n||(o=ee[e],ee[e]=i,i=null!=r(t,e,n)?e.toLowerCase():null,ee[e]=o),i}});var ne=/^(?:input|select|textarea|button)$/i,ie=/^(?:a|area)$/i;S.fn.extend({prop:function(t,e){return L(this,S.prop,t,e,1<arguments.length)},removeProp:function(t){return this.each(function(){delete this[S.propFix[t]||t]})}}),S.extend({prop:function(t,e,n){var i,o,r=t.nodeType;if(3!==r&&8!==r&&2!==r)return 1===r&&S.isXMLDoc(t)||(e=S.propFix[e]||e,o=S.propHooks[e]),void 0!==n?o&&"set"in o&&void 0!==(i=o.set(t,n,e))?i:t[e]=n:o&&"get"in o&&null!==(i=o.get(t,e))?i:t[e]},propHooks:{tabIndex:{get:function(t){var e=S.find.attr(t,"tabindex");return e?parseInt(e,10):ne.test(t.nodeName)||ie.test(t.nodeName)&&t.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),m.optSelected||(S.propHooks.selected={get:function(t){var e=t.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null},set:function(t){var e=t.parentNode;e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex)}}),S.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){S.propFix[this.toLowerCase()]=this});var oe=/[\t\r\n\f]/g;function re(t){return t.getAttribute&&t.getAttribute("class")||""}S.fn.extend({addClass:function(e){var t,n,i,o,r,s,a,l=0;if(S.isFunction(e))return this.each(function(t){S(this).addClass(e.call(this,t,re(this)))});if("string"==typeof e&&e)for(t=e.match(O)||[];n=this[l++];)if(o=re(n),i=1===n.nodeType&&(" "+o+" ").replace(oe," ")){for(s=0;r=t[s++];)i.indexOf(" "+r+" ")<0&&(i+=r+" ");o!==(a=S.trim(i))&&n.setAttribute("class",a)}return this},removeClass:function(e){var t,n,i,o,r,s,a,l=0;if(S.isFunction(e))return this.each(function(t){S(this).removeClass(e.call(this,t,re(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof e&&e)for(t=e.match(O)||[];n=this[l++];)if(o=re(n),i=1===n.nodeType&&(" "+o+" ").replace(oe," ")){for(s=0;r=t[s++];)for(;-1<i.indexOf(" "+r+" ");)i=i.replace(" "+r+" "," ");o!==(a=S.trim(i))&&n.setAttribute("class",a)}return this},toggleClass:function(o,e){var r=typeof o;return"boolean"==typeof e&&"string"===r?e?this.addClass(o):this.removeClass(o):S.isFunction(o)?this.each(function(t){S(this).toggleClass(o.call(this,t,re(this),e),e)}):this.each(function(){var t,e,n,i;if("string"===r)for(e=0,n=S(this),i=o.match(O)||[];t=i[e++];)n.hasClass(t)?n.removeClass(t):n.addClass(t);else void 0!==o&&"boolean"!==r||((t=re(this))&&H.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===o?"":H.get(this,"__className__")||""))})},hasClass:function(t){var e,n,i=0;for(e=" "+t+" ";n=this[i++];)if(1===n.nodeType&&-1<(" "+re(n)+" ").replace(oe," ").indexOf(e))return!0;return!1}});var se=/\r/g,ae=/[\x20\t\r\n\f]+/g;S.fn.extend({val:function(n){var i,t,o,e=this[0];return arguments.length?(o=S.isFunction(n),this.each(function(t){var e;1===this.nodeType&&(null==(e=o?n.call(this,t,S(this).val()):n)?e="":"number"==typeof e?e+="":S.isArray(e)&&(e=S.map(e,function(t){return null==t?"":t+""})),(i=S.valHooks[this.type]||S.valHooks[this.nodeName.toLowerCase()])&&"set"in i&&void 0!==i.set(this,e,"value")||(this.value=e))})):e?(i=S.valHooks[e.type]||S.valHooks[e.nodeName.toLowerCase()])&&"get"in i&&void 0!==(t=i.get(e,"value"))?t:"string"==typeof(t=e.value)?t.replace(se,""):null==t?"":t:void 0}}),S.extend({valHooks:{option:{get:function(t){var e=S.find.attr(t,"value");return null!=e?e:S.trim(S.text(t)).replace(ae," ")}},select:{get:function(t){for(var e,n,i=t.options,o=t.selectedIndex,r="select-one"===t.type||o<0,s=r?null:[],a=r?o+1:i.length,l=o<0?a:r?o:0;l<a;l++)if(((n=i[l]).selected||l===o)&&(m.optDisabled?!n.disabled:null===n.getAttribute("disabled"))&&(!n.parentNode.disabled||!S.nodeName(n.parentNode,"optgroup"))){if(e=S(n).val(),r)return e;s.push(e)}return s},set:function(t,e){for(var n,i,o=t.options,r=S.makeArray(e),s=o.length;s--;)((i=o[s]).selected=-1<S.inArray(S.valHooks.option.get(i),r))&&(n=!0);return n||(t.selectedIndex=-1),r}}}}),S.each(["radio","checkbox"],function(){S.valHooks[this]={set:function(t,e){if(S.isArray(e))return t.checked=-1<S.inArray(S(t).val(),e)}},m.checkOn||(S.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})});var le=/^(?:focusinfocus|focusoutblur)$/;S.extend(S.event,{trigger:function(t,e,n,i){var o,r,s,a,l,u,c,f=[n||E],p=h.call(t,"type")?t.type:t,d=h.call(t,"namespace")?t.namespace.split("."):[];if(r=s=n=n||E,3!==n.nodeType&&8!==n.nodeType&&!le.test(p+S.event.triggered)&&(-1<p.indexOf(".")&&(p=(d=p.split(".")).shift(),d.sort()),l=p.indexOf(":")<0&&"on"+p,(t=t[S.expando]?t:new S.Event(p,"object"==typeof t&&t)).isTrigger=i?2:3,t.namespace=d.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+d.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=n),e=null==e?[t]:S.makeArray(e,[t]),c=S.event.special[p]||{},i||!c.trigger||!1!==c.trigger.apply(n,e))){if(!i&&!c.noBubble&&!S.isWindow(n)){for(a=c.delegateType||p,le.test(a+p)||(r=r.parentNode);r;r=r.parentNode)f.push(r),s=r;s===(n.ownerDocument||E)&&f.push(s.defaultView||s.parentWindow||C)}for(o=0;(r=f[o++])&&!t.isPropagationStopped();)t.type=1<o?a:c.bindType||p,(u=(H.get(r,"events")||{})[t.type]&&H.get(r,"handle"))&&u.apply(r,e),(u=l&&r[l])&&u.apply&&R(r)&&(t.result=u.apply(r,e),!1===t.result&&t.preventDefault());return t.type=p,i||t.isDefaultPrevented()||c._default&&!1!==c._default.apply(f.pop(),e)||!R(n)||l&&S.isFunction(n[p])&&!S.isWindow(n)&&((s=n[l])&&(n[l]=null),n[S.event.triggered=p](),S.event.triggered=void 0,s&&(n[l]=s)),t.result}},simulate:function(t,e,n){var i=S.extend(new S.Event,n,{type:t,isSimulated:!0});S.event.trigger(i,null,e)}}),S.fn.extend({trigger:function(t,e){return this.each(function(){S.event.trigger(t,e,this)})},triggerHandler:function(t,e){var n=this[0];if(n)return S.event.trigger(t,e,n,!0)}}),S.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(t,n){S.fn[n]=function(t,e){return 0<arguments.length?this.on(n,null,t,e):this.trigger(n)}}),S.fn.extend({hover:function(t,e){return this.mouseenter(t).mouseleave(e||t)}}),m.focusin="onfocusin"in C,m.focusin||S.each({focus:"focusin",blur:"focusout"},function(n,i){var o=function(t){S.event.simulate(i,t.target,S.event.fix(t))};S.event.special[i]={setup:function(){var t=this.ownerDocument||this,e=H.access(t,i);e||t.addEventListener(n,o,!0),H.access(t,i,(e||0)+1)},teardown:function(){var t=this.ownerDocument||this,e=H.access(t,i)-1;e?H.access(t,i,e):(t.removeEventListener(n,o,!0),H.remove(t,i))}}});var ue=C.location,ce=S.now(),fe=/\?/;S.parseJSON=function(t){return JSON.parse(t+"")},S.parseXML=function(t){var e;if(!t||"string"!=typeof t)return null;try{e=(new C.DOMParser).parseFromString(t,"text/xml")}catch(t){e=void 0}return e&&!e.getElementsByTagName("parsererror").length||S.error("Invalid XML: "+t),e};var pe=/#.*$/,de=/([?&])_=[^&]*/,he=/^(.*?):[ \t]*([^\r\n]*)$/gm,ge=/^(?:GET|HEAD)$/,me=/^\/\//,ve={},ye={},be="*/".concat("*"),xe=E.createElement("a");function we(r){return function(t,e){"string"!=typeof t&&(e=t,t="*");var n,i=0,o=t.toLowerCase().match(O)||[];if(S.isFunction(e))for(;n=o[i++];)"+"===n[0]?(n=n.slice(1)||"*",(r[n]=r[n]||[]).unshift(e)):(r[n]=r[n]||[]).push(e)}}function Te(e,o,r,s){var a={},l=e===ye;function u(t){var i;return a[t]=!0,S.each(e[t]||[],function(t,e){var n=e(o,r,s);return"string"!=typeof n||l||a[n]?l?!(i=n):void 0:(o.dataTypes.unshift(n),u(n),!1)}),i}return u(o.dataTypes[0])||!a["*"]&&u("*")}function Ce(t,e){var n,i,o=S.ajaxSettings.flatOptions||{};for(n in e)void 0!==e[n]&&((o[n]?t:i||(i={}))[n]=e[n]);return i&&S.extend(!0,t,i),t}xe.href=ue.href,S.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:ue.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(ue.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":be,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":S.parseJSON,"text xml":S.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?Ce(Ce(t,S.ajaxSettings),e):Ce(S.ajaxSettings,t)},ajaxPrefilter:we(ve),ajaxTransport:we(ye),ajax:function(t,e){"object"==typeof t&&(e=t,t=void 0),e=e||{};var c,f,p,n,d,i,h,o,g=S.ajaxSetup({},e),m=g.context||g,v=g.context&&(m.nodeType||m.jquery)?S(m):S.event,y=S.Deferred(),b=S.Callbacks("once memory"),x=g.statusCode||{},r={},s={},w=0,a="canceled",T={readyState:0,getResponseHeader:function(t){var e;if(2===w){if(!n)for(n={};e=he.exec(p);)n[e[1].toLowerCase()]=e[2];e=n[t.toLowerCase()]}return null==e?null:e},getAllResponseHeaders:function(){return 2===w?p:null},setRequestHeader:function(t,e){var n=t.toLowerCase();return w||(t=s[n]=s[n]||t,r[t]=e),this},overrideMimeType:function(t){return w||(g.mimeType=t),this},statusCode:function(t){var e;if(t)if(w<2)for(e in t)x[e]=[x[e],t[e]];else T.always(t[T.status]);return this},abort:function(t){var e=t||a;return c&&c.abort(e),l(0,e),this}};if(y.promise(T).complete=b.add,T.success=T.done,T.error=T.fail,g.url=((t||g.url||ue.href)+"").replace(pe,"").replace(me,ue.protocol+"//"),g.type=e.method||e.type||g.method||g.type,g.dataTypes=S.trim(g.dataType||"*").toLowerCase().match(O)||[""],null==g.crossDomain){i=E.createElement("a");try{i.href=g.url,i.href=i.href,g.crossDomain=xe.protocol+"//"+xe.host!=i.protocol+"//"+i.host}catch(t){g.crossDomain=!0}}if(g.data&&g.processData&&"string"!=typeof g.data&&(g.data=S.param(g.data,g.traditional)),Te(ve,g,e,T),2===w)return T;for(o in(h=S.event&&g.global)&&0==S.active++&&S.event.trigger("ajaxStart"),g.type=g.type.toUpperCase(),g.hasContent=!ge.test(g.type),f=g.url,g.hasContent||(g.data&&(f=g.url+=(fe.test(f)?"&":"?")+g.data,delete g.data),!1===g.cache&&(g.url=de.test(f)?f.replace(de,"$1_="+ce++):f+(fe.test(f)?"&":"?")+"_="+ce++)),g.ifModified&&(S.lastModified[f]&&T.setRequestHeader("If-Modified-Since",S.lastModified[f]),S.etag[f]&&T.setRequestHeader("If-None-Match",S.etag[f])),(g.data&&g.hasContent&&!1!==g.contentType||e.contentType)&&T.setRequestHeader("Content-Type",g.contentType),T.setRequestHeader("Accept",g.dataTypes[0]&&g.accepts[g.dataTypes[0]]?g.accepts[g.dataTypes[0]]+("*"!==g.dataTypes[0]?", "+be+"; q=0.01":""):g.accepts["*"]),g.headers)T.setRequestHeader(o,g.headers[o]);if(g.beforeSend&&(!1===g.beforeSend.call(m,T,g)||2===w))return T.abort();for(o in a="abort",{success:1,error:1,complete:1})T[o](g[o]);if(c=Te(ye,g,e,T)){if(T.readyState=1,h&&v.trigger("ajaxSend",[T,g]),2===w)return T;g.async&&0<g.timeout&&(d=C.setTimeout(function(){T.abort("timeout")},g.timeout));try{w=1,c.send(r,l)}catch(t){if(!(w<2))throw t;l(-1,t)}}else l(-1,"No Transport");function l(t,e,n,i){var o,r,s,a,l,u=e;2!==w&&(w=2,d&&C.clearTimeout(d),c=void 0,p=i||"",T.readyState=0<t?4:0,o=200<=t&&t<300||304===t,n&&(a=function(t,e,n){for(var i,o,r,s,a=t.contents,l=t.dataTypes;"*"===l[0];)l.shift(),void 0===i&&(i=t.mimeType||e.getResponseHeader("Content-Type"));if(i)for(o in a)if(a[o]&&a[o].test(i)){l.unshift(o);break}if(l[0]in n)r=l[0];else{for(o in n){if(!l[0]||t.converters[o+" "+l[0]]){r=o;break}s||(s=o)}r=r||s}if(r)return r!==l[0]&&l.unshift(r),n[r]}(g,T,n)),a=function(t,e,n,i){var o,r,s,a,l,u={},c=t.dataTypes.slice();if(c[1])for(s in t.converters)u[s.toLowerCase()]=t.converters[s];for(r=c.shift();r;)if(t.responseFields[r]&&(n[t.responseFields[r]]=e),!l&&i&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),l=r,r=c.shift())if("*"===r)r=l;else if("*"!==l&&l!==r){if(!(s=u[l+" "+r]||u["* "+r]))for(o in u)if((a=o.split(" "))[1]===r&&(s=u[l+" "+a[0]]||u["* "+a[0]])){!0===s?s=u[o]:!0!==u[o]&&(r=a[0],c.unshift(a[1]));break}if(!0!==s)if(s&&t.throws)e=s(e);else try{e=s(e)}catch(t){return{state:"parsererror",error:s?t:"No conversion from "+l+" to "+r}}}return{state:"success",data:e}}(g,a,T,o),o?(g.ifModified&&((l=T.getResponseHeader("Last-Modified"))&&(S.lastModified[f]=l),(l=T.getResponseHeader("etag"))&&(S.etag[f]=l)),204===t||"HEAD"===g.type?u="nocontent":304===t?u="notmodified":(u=a.state,r=a.data,o=!(s=a.error))):(s=u,!t&&u||(u="error",t<0&&(t=0))),T.status=t,T.statusText=(e||u)+"",o?y.resolveWith(m,[r,u,T]):y.rejectWith(m,[T,u,s]),T.statusCode(x),x=void 0,h&&v.trigger(o?"ajaxSuccess":"ajaxError",[T,g,o?r:s]),b.fireWith(m,[T,u]),h&&(v.trigger("ajaxComplete",[T,g]),--S.active||S.event.trigger("ajaxStop")))}return T},getJSON:function(t,e,n){return S.get(t,e,n,"json")},getScript:function(t,e){return S.get(t,void 0,e,"script")}}),S.each(["get","post"],function(t,o){S[o]=function(t,e,n,i){return S.isFunction(e)&&(i=i||n,n=e,e=void 0),S.ajax(S.extend({url:t,type:o,dataType:i,data:e,success:n},S.isPlainObject(t)&&t))}}),S._evalUrl=function(t){return S.ajax({url:t,type:"GET",dataType:"script",async:!1,global:!1,throws:!0})},S.fn.extend({wrapAll:function(e){var t;return S.isFunction(e)?this.each(function(t){S(this).wrapAll(e.call(this,t))}):(this[0]&&(t=S(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t}).append(this)),this)},wrapInner:function(n){return S.isFunction(n)?this.each(function(t){S(this).wrapInner(n.call(this,t))}):this.each(function(){var t=S(this),e=t.contents();e.length?e.wrapAll(n):t.append(n)})},wrap:function(e){var n=S.isFunction(e);return this.each(function(t){S(this).wrapAll(n?e.call(this,t):e)})},unwrap:function(){return this.parent().each(function(){S.nodeName(this,"body")||S(this).replaceWith(this.childNodes)}).end()}}),S.expr.filters.hidden=function(t){return!S.expr.filters.visible(t)},S.expr.filters.visible=function(t){return 0<t.offsetWidth||0<t.offsetHeight||0<t.getClientRects().length};var Ee=/%20/g,Se=/\[\]$/,$e=/\r?\n/g,ke=/^(?:submit|button|image|reset|file)$/i,Ne=/^(?:input|select|textarea|keygen)/i;function De(n,t,i,o){var e;if(S.isArray(t))S.each(t,function(t,e){i||Se.test(n)?o(n,e):De(n+"["+("object"==typeof e&&null!=e?t:"")+"]",e,i,o)});else if(i||"object"!==S.type(t))o(n,t);else for(e in t)De(n+"["+e+"]",t[e],i,o)}S.param=function(t,e){var n,i=[],o=function(t,e){e=S.isFunction(e)?e():null==e?"":e,i[i.length]=encodeURIComponent(t)+"="+encodeURIComponent(e)};if(void 0===e&&(e=S.ajaxSettings&&S.ajaxSettings.traditional),S.isArray(t)||t.jquery&&!S.isPlainObject(t))S.each(t,function(){o(this.name,this.value)});else for(n in t)De(n,t[n],e,o);return i.join("&").replace(Ee,"+")},S.fn.extend({serialize:function(){return S.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var t=S.prop(this,"elements");return t?S.makeArray(t):this}).filter(function(){var t=this.type;return this.name&&!S(this).is(":disabled")&&Ne.test(this.nodeName)&&!ke.test(t)&&(this.checked||!X.test(t))}).map(function(t,e){var n=S(this).val();return null==n?null:S.isArray(n)?S.map(n,function(t){return{name:e.name,value:t.replace($e,"\r\n")}}):{name:e.name,value:n.replace($e,"\r\n")}}).get()}}),S.ajaxSettings.xhr=function(){try{return new C.XMLHttpRequest}catch(t){}};var Ae={0:200,1223:204},je=S.ajaxSettings.xhr();m.cors=!!je&&"withCredentials"in je,m.ajax=je=!!je,S.ajaxTransport(function(o){var r,s;if(m.cors||je&&!o.crossDomain)return{send:function(t,e){var n,i=o.xhr();if(i.open(o.type,o.url,o.async,o.username,o.password),o.xhrFields)for(n in o.xhrFields)i[n]=o.xhrFields[n];for(n in o.mimeType&&i.overrideMimeType&&i.overrideMimeType(o.mimeType),o.crossDomain||t["X-Requested-With"]||(t["X-Requested-With"]="XMLHttpRequest"),t)i.setRequestHeader(n,t[n]);r=function(t){return function(){r&&(r=s=i.onload=i.onerror=i.onabort=i.onreadystatechange=null,"abort"===t?i.abort():"error"===t?"number"!=typeof i.status?e(0,"error"):e(i.status,i.statusText):e(Ae[i.status]||i.status,i.statusText,"text"!==(i.responseType||"text")||"string"!=typeof i.responseText?{binary:i.response}:{text:i.responseText},i.getAllResponseHeaders()))}},i.onload=r(),s=i.onerror=r("error"),void 0!==i.onabort?i.onabort=s:i.onreadystatechange=function(){4===i.readyState&&C.setTimeout(function(){r&&s()})},r=r("abort");try{i.send(o.hasContent&&o.data||null)}catch(t){if(r)throw t}},abort:function(){r&&r()}}}),S.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(t){return S.globalEval(t),t}}}),S.ajaxPrefilter("script",function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET")}),S.ajaxTransport("script",function(n){var i,o;if(n.crossDomain)return{send:function(t,e){i=S("<script>").prop({charset:n.scriptCharset,src:n.url}).on("load error",o=function(t){i.remove(),o=null,t&&e("error"===t.type?404:200,t.type)}),E.head.appendChild(i[0])},abort:function(){o&&o()}}});var Oe=[],Ie=/(=)\?(?=&|$)|\?\?/;S.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=Oe.pop()||S.expando+"_"+ce++;return this[t]=!0,t}}),S.ajaxPrefilter("json jsonp",function(t,e,n){var i,o,r,s=!1!==t.jsonp&&(Ie.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&Ie.test(t.data)&&"data");if(s||"jsonp"===t.dataTypes[0])return i=t.jsonpCallback=S.isFunction(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,s?t[s]=t[s].replace(Ie,"$1"+i):!1!==t.jsonp&&(t.url+=(fe.test(t.url)?"&":"?")+t.jsonp+"="+i),t.converters["script json"]=function(){return r||S.error(i+" was not called"),r[0]},t.dataTypes[0]="json",o=C[i],C[i]=function(){r=arguments},n.always(function(){void 0===o?S(C).removeProp(i):C[i]=o,t[i]&&(t.jsonpCallback=e.jsonpCallback,Oe.push(i)),r&&S.isFunction(o)&&o(r[0]),r=o=void 0}),"script"}),S.parseHTML=function(t,e,n){if(!t||"string"!=typeof t)return null;"boolean"==typeof e&&(n=e,e=!1),e=e||E;var i=x.exec(t),o=!n&&[];return i?[e.createElement(i[1])]:(i=nt([t],e,o),o&&o.length&&S(o).remove(),S.merge([],i.childNodes))};var Le=S.fn.load;function Re(t){return S.isWindow(t)?t:9===t.nodeType&&t.defaultView}S.fn.load=function(t,e,n){if("string"!=typeof t&&Le)return Le.apply(this,arguments);var i,o,r,s=this,a=t.indexOf(" ");return-1<a&&(i=S.trim(t.slice(a)),t=t.slice(0,a)),S.isFunction(e)?(n=e,e=void 0):e&&"object"==typeof e&&(o="POST"),0<s.length&&S.ajax({url:t,type:o||"GET",dataType:"html",data:e}).done(function(t){r=arguments,s.html(i?S("<div>").append(S.parseHTML(t)).find(i):t)}).always(n&&function(t,e){s.each(function(){n.apply(this,r||[t.responseText,e,t])})}),this},S.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(t,e){S.fn[e]=function(t){return this.on(e,t)}}),S.expr.filters.animated=function(e){return S.grep(S.timers,function(t){return e===t.elem}).length},S.offset={setOffset:function(t,e,n){var i,o,r,s,a,l,u=S.css(t,"position"),c=S(t),f={};"static"===u&&(t.style.position="relative"),a=c.offset(),r=S.css(t,"top"),l=S.css(t,"left"),("absolute"===u||"fixed"===u)&&-1<(r+l).indexOf("auto")?(s=(i=c.position()).top,o=i.left):(s=parseFloat(r)||0,o=parseFloat(l)||0),S.isFunction(e)&&(e=e.call(t,n,S.extend({},a))),null!=e.top&&(f.top=e.top-a.top+s),null!=e.left&&(f.left=e.left-a.left+o),"using"in e?e.using.call(t,f):c.css(f)}},S.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){S.offset.setOffset(this,e,t)});var t,n,i=this[0],o={top:0,left:0},r=i&&i.ownerDocument;return r?(t=r.documentElement,S.contains(t,i)?(o=i.getBoundingClientRect(),n=Re(r),{top:o.top+n.pageYOffset-t.clientTop,left:o.left+n.pageXOffset-t.clientLeft}):o):void 0},position:function(){if(this[0]){var t,e,n=this[0],i={top:0,left:0};return"fixed"===S.css(n,"position")?e=n.getBoundingClientRect():(t=this.offsetParent(),e=this.offset(),S.nodeName(t[0],"html")||(i=t.offset()),i.top+=S.css(t[0],"borderTopWidth",!0),i.left+=S.css(t[0],"borderLeftWidth",!0)),{top:e.top-i.top-S.css(n,"marginTop",!0),left:e.left-i.left-S.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var t=this.offsetParent;t&&"static"===S.css(t,"position");)t=t.offsetParent;return t||Dt})}}),S.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,o){var r="pageYOffset"===o;S.fn[e]=function(t){return L(this,function(t,e,n){var i=Re(t);if(void 0===n)return i?i[o]:t[e];i?i.scrollTo(r?i.pageXOffset:n,r?n:i.pageYOffset):t[e]=n},e,t,arguments.length)}}),S.each(["top","left"],function(t,n){S.cssHooks[n]=jt(m.pixelPosition,function(t,e){if(e)return e=At(t,n),$t.test(e)?S(t).position()[n]+"px":e})}),S.each({Height:"height",Width:"width"},function(r,s){S.each({padding:"inner"+r,content:s,"":"outer"+r},function(i,t){S.fn[t]=function(t,e){var n=arguments.length&&(i||"boolean"!=typeof t),o=i||(!0===t||!0===e?"margin":"border");return L(this,function(t,e,n){var i;return S.isWindow(t)?t.document.documentElement["client"+r]:9===t.nodeType?(i=t.documentElement,Math.max(t.body["scroll"+r],i["scroll"+r],t.body["offset"+r],i["offset"+r],i["client"+r])):void 0===n?S.css(t,e,o):S.style(t,e,n,o)},s,n?t:void 0,n,null)}})}),S.fn.extend({bind:function(t,e,n){return this.on(t,null,e,n)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,n,i){return this.on(e,t,n,i)},undelegate:function(t,e,n){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",n)},size:function(){return this.length}}),S.fn.andSelf=S.fn.addBack,"function"==typeof define&&define.amd&&define("jquery",[],function(){return S});var qe=C.jQuery,He=C.$;return S.noConflict=function(t){return C.$===S&&(C.$=He),t&&C.jQuery===S&&(C.jQuery=qe),S},t||(C.jQuery=C.$=S),S}),"undefined"==typeof jQuery)throw new Error("Bootstrap's JavaScript requires jQuery");function initMap(){var t={lat:50.425,lng:30.524},e=new google.maps.Map(document.getElementById("map"),{zoom:15,center:t});new google.maps.Marker({position:t,map:e})}!function(t){"use strict";var e=jQuery.fn.jquery.split(" ")[0].split(".");if(e[0]<2&&e[1]<9||1==e[0]&&9==e[1]&&e[2]<1||3<e[0])throw new Error("Bootstrap's JavaScript requires jQuery version 1.9.1 or higher, but lower than version 4")}(),function(i){"use strict";i.fn.emulateTransitionEnd=function(t){var e=!1,n=this;i(this).one("bsTransitionEnd",function(){e=!0});return setTimeout(function(){e||i(n).trigger(i.support.transition.end)},t),this},i(function(){i.support.transition=function(){var t=document.createElement("bootstrap"),e={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend",transition:"transitionend"};for(var n in e)if(void 0!==t.style[n])return{end:e[n]};return!1}(),i.support.transition&&(i.event.special.bsTransitionEnd={bindType:i.support.transition.end,delegateType:i.support.transition.end,handle:function(t){if(i(t.target).is(this))return t.handleObj.handler.apply(this,arguments)}})})}(jQuery),function(r){"use strict";var e='[data-dismiss="alert"]',s=function(t){r(t).on("click",e,this.close)};s.VERSION="3.3.7",s.TRANSITION_DURATION=150,s.prototype.close=function(t){var e=r(this),n=e.attr("data-target");n||(n=(n=e.attr("href"))&&n.replace(/.*(?=#[^\s]*$)/,""));var i=r("#"===n?[]:n);function o(){i.detach().trigger("closed.bs.alert").remove()}t&&t.preventDefault(),i.length||(i=e.closest(".alert")),i.trigger(t=r.Event("close.bs.alert")),t.isDefaultPrevented()||(i.removeClass("in"),r.support.transition&&i.hasClass("fade")?i.one("bsTransitionEnd",o).emulateTransitionEnd(s.TRANSITION_DURATION):o())};var t=r.fn.alert;r.fn.alert=function(n){return this.each(function(){var t=r(this),e=t.data("bs.alert");e||t.data("bs.alert",e=new s(this)),"string"==typeof n&&e[n].call(t)})},r.fn.alert.Constructor=s,r.fn.alert.noConflict=function(){return r.fn.alert=t,this},r(document).on("click.bs.alert.data-api",e,s.prototype.close)}(jQuery),function(r){"use strict";var o=function(t,e){this.$element=r(t),this.options=r.extend({},o.DEFAULTS,e),this.isLoading=!1};function n(i){return this.each(function(){var t=r(this),e=t.data("bs.button"),n="object"==typeof i&&i;e||t.data("bs.button",e=new o(this,n)),"toggle"==i?e.toggle():i&&e.setState(i)})}o.VERSION="3.3.7",o.DEFAULTS={loadingText:"loading..."},o.prototype.setState=function(t){var e="disabled",n=this.$element,i=n.is("input")?"val":"html",o=n.data();t+="Text",null==o.resetText&&n.data("resetText",n[i]()),setTimeout(r.proxy(function(){n[i](null==o[t]?this.options[t]:o[t]),"loadingText"==t?(this.isLoading=!0,n.addClass(e).attr(e,e).prop(e,!0)):this.isLoading&&(this.isLoading=!1,n.removeClass(e).removeAttr(e).prop(e,!1))},this),0)},o.prototype.toggle=function(){var t=!0,e=this.$element.closest('[data-toggle="buttons"]');if(e.length){var n=this.$element.find("input");"radio"==n.prop("type")?(n.prop("checked")&&(t=!1),e.find(".active").removeClass("active"),this.$element.addClass("active")):"checkbox"==n.prop("type")&&(n.prop("checked")!==this.$element.hasClass("active")&&(t=!1),this.$element.toggleClass("active")),n.prop("checked",this.$element.hasClass("active")),t&&n.trigger("change")}else this.$element.attr("aria-pressed",!this.$element.hasClass("active")),this.$element.toggleClass("active")};var t=r.fn.button;r.fn.button=n,r.fn.button.Constructor=o,r.fn.button.noConflict=function(){return r.fn.button=t,this},r(document).on("click.bs.button.data-api",'[data-toggle^="button"]',function(t){var e=r(t.target).closest(".btn");n.call(e,"toggle"),r(t.target).is('input[type="radio"], input[type="checkbox"]')||(t.preventDefault(),e.is("input,button")?e.trigger("focus"):e.find("input:visible,button:visible").first().trigger("focus"))}).on("focus.bs.button.data-api blur.bs.button.data-api",'[data-toggle^="button"]',function(t){r(t.target).closest(".btn").toggleClass("focus",/^focus(in)?$/.test(t.type))})}(jQuery),function(f){"use strict";var p=function(t,e){this.$element=f(t),this.$indicators=this.$element.find(".carousel-indicators"),this.options=e,this.paused=null,this.sliding=null,this.interval=null,this.$active=null,this.$items=null,this.options.keyboard&&this.$element.on("keydown.bs.carousel",f.proxy(this.keydown,this)),"hover"==this.options.pause&&!("ontouchstart"in document.documentElement)&&this.$element.on("mouseenter.bs.carousel",f.proxy(this.pause,this)).on("mouseleave.bs.carousel",f.proxy(this.cycle,this))};function s(o){return this.each(function(){var t=f(this),e=t.data("bs.carousel"),n=f.extend({},p.DEFAULTS,t.data(),"object"==typeof o&&o),i="string"==typeof o?o:n.slide;e||t.data("bs.carousel",e=new p(this,n)),"number"==typeof o?e.to(o):i?e[i]():n.interval&&e.pause().cycle()})}p.VERSION="3.3.7",p.TRANSITION_DURATION=600,p.DEFAULTS={interval:5e3,pause:"hover",wrap:!0,keyboard:!0},p.prototype.keydown=function(t){if(!/input|textarea/i.test(t.target.tagName)){switch(t.which){case 37:this.prev();break;case 39:this.next();break;default:return}t.preventDefault()}},p.prototype.cycle=function(t){return t||(this.paused=!1),this.interval&&clearInterval(this.interval),this.options.interval&&!this.paused&&(this.interval=setInterval(f.proxy(this.next,this),this.options.interval)),this},p.prototype.getItemIndex=function(t){return this.$items=t.parent().children(".item"),this.$items.index(t||this.$active)},p.prototype.getItemForDirection=function(t,e){var n=this.getItemIndex(e);if(("prev"==t&&0===n||"next"==t&&n==this.$items.length-1)&&!this.options.wrap)return e;var i=(n+("prev"==t?-1:1))%this.$items.length;return this.$items.eq(i)},p.prototype.to=function(t){var e=this,n=this.getItemIndex(this.$active=this.$element.find(".item.active"));if(!(t>this.$items.length-1||t<0))return this.sliding?this.$element.one("slid.bs.carousel",function(){e.to(t)}):n==t?this.pause().cycle():this.slide(n<t?"next":"prev",this.$items.eq(t))},p.prototype.pause=function(t){return t||(this.paused=!0),this.$element.find(".next, .prev").length&&f.support.transition&&(this.$element.trigger(f.support.transition.end),this.cycle(!0)),this.interval=clearInterval(this.interval),this},p.prototype.next=function(){if(!this.sliding)return this.slide("next")},p.prototype.prev=function(){if(!this.sliding)return this.slide("prev")},p.prototype.slide=function(t,e){var n=this.$element.find(".item.active"),i=e||this.getItemForDirection(t,n),o=this.interval,r="next"==t?"left":"right",s=this;if(i.hasClass("active"))return this.sliding=!1;var a=i[0],l=f.Event("slide.bs.carousel",{relatedTarget:a,direction:r});if(this.$element.trigger(l),!l.isDefaultPrevented()){if(this.sliding=!0,o&&this.pause(),this.$indicators.length){this.$indicators.find(".active").removeClass("active");var u=f(this.$indicators.children()[this.getItemIndex(i)]);u&&u.addClass("active")}var c=f.Event("slid.bs.carousel",{relatedTarget:a,direction:r});return f.support.transition&&this.$element.hasClass("slide")?(i.addClass(t),i[0].offsetWidth,n.addClass(r),i.addClass(r),n.one("bsTransitionEnd",function(){i.removeClass([t,r].join(" ")).addClass("active"),n.removeClass(["active",r].join(" ")),s.sliding=!1,setTimeout(function(){s.$element.trigger(c)},0)}).emulateTransitionEnd(p.TRANSITION_DURATION)):(n.removeClass("active"),i.addClass("active"),this.sliding=!1,this.$element.trigger(c)),o&&this.cycle(),this}};var t=f.fn.carousel;f.fn.carousel=s,f.fn.carousel.Constructor=p,f.fn.carousel.noConflict=function(){return f.fn.carousel=t,this};var e=function(t){var e,n=f(this),i=f(n.attr("data-target")||(e=n.attr("href"))&&e.replace(/.*(?=#[^\s]+$)/,""));if(i.hasClass("carousel")){var o=f.extend({},i.data(),n.data()),r=n.attr("data-slide-to");r&&(o.interval=!1),s.call(i,o),r&&i.data("bs.carousel").to(r),t.preventDefault()}};f(document).on("click.bs.carousel.data-api","[data-slide]",e).on("click.bs.carousel.data-api","[data-slide-to]",e),f(window).on("load",function(){f('[data-ride="carousel"]').each(function(){var t=f(this);s.call(t,t.data())})})}(jQuery),function(s){"use strict";var a=function(t,e){this.$element=s(t),this.options=s.extend({},a.DEFAULTS,e),this.$trigger=s('[data-toggle="collapse"][href="#'+t.id+'"],[data-toggle="collapse"][data-target="#'+t.id+'"]'),this.transitioning=null,this.options.parent?this.$parent=this.getParent():this.addAriaAndCollapsedClass(this.$element,this.$trigger),this.options.toggle&&this.toggle()};function o(t){var e,n=t.attr("data-target")||(e=t.attr("href"))&&e.replace(/.*(?=#[^\s]+$)/,"");return s(n)}function l(i){return this.each(function(){var t=s(this),e=t.data("bs.collapse"),n=s.extend({},a.DEFAULTS,t.data(),"object"==typeof i&&i);!e&&n.toggle&&/show|hide/.test(i)&&(n.toggle=!1),e||t.data("bs.collapse",e=new a(this,n)),"string"==typeof i&&e[i]()})}a.VERSION="3.3.7",a.TRANSITION_DURATION=350,a.DEFAULTS={toggle:!0},a.prototype.dimension=function(){return this.$element.hasClass("width")?"width":"height"},a.prototype.show=function(){if(!this.transitioning&&!this.$element.hasClass("in")){var t,e=this.$parent&&this.$parent.children(".panel").children(".in, .collapsing");if(!(e&&e.length&&(t=e.data("bs.collapse"))&&t.transitioning)){var n=s.Event("show.bs.collapse");if(this.$element.trigger(n),!n.isDefaultPrevented()){e&&e.length&&(l.call(e,"hide"),t||e.data("bs.collapse",null));var i=this.dimension();this.$element.removeClass("collapse").addClass("collapsing")[i](0).attr("aria-expanded",!0),this.$trigger.removeClass("collapsed").attr("aria-expanded",!0),this.transitioning=1;var o=function(){this.$element.removeClass("collapsing").addClass("collapse in")[i](""),this.transitioning=0,this.$element.trigger("shown.bs.collapse")};if(!s.support.transition)return o.call(this);var r=s.camelCase(["scroll",i].join("-"));this.$element.one("bsTransitionEnd",s.proxy(o,this)).emulateTransitionEnd(a.TRANSITION_DURATION)[i](this.$element[0][r])}}}},a.prototype.hide=function(){if(!this.transitioning&&this.$element.hasClass("in")){var t=s.Event("hide.bs.collapse");if(this.$element.trigger(t),!t.isDefaultPrevented()){var e=this.dimension();this.$element[e](this.$element[e]())[0].offsetHeight,this.$element.addClass("collapsing").removeClass("collapse in").attr("aria-expanded",!1),this.$trigger.addClass("collapsed").attr("aria-expanded",!1),this.transitioning=1;var n=function(){this.transitioning=0,this.$element.removeClass("collapsing").addClass("collapse").trigger("hidden.bs.collapse")};if(!s.support.transition)return n.call(this);this.$element[e](0).one("bsTransitionEnd",s.proxy(n,this)).emulateTransitionEnd(a.TRANSITION_DURATION)}}},a.prototype.toggle=function(){this[this.$element.hasClass("in")?"hide":"show"]()},a.prototype.getParent=function(){return s(this.options.parent).find('[data-toggle="collapse"][data-parent="'+this.options.parent+'"]').each(s.proxy(function(t,e){var n=s(e);this.addAriaAndCollapsedClass(o(n),n)},this)).end()},a.prototype.addAriaAndCollapsedClass=function(t,e){var n=t.hasClass("in");t.attr("aria-expanded",n),e.toggleClass("collapsed",!n).attr("aria-expanded",n)};var t=s.fn.collapse;s.fn.collapse=l,s.fn.collapse.Constructor=a,s.fn.collapse.noConflict=function(){return s.fn.collapse=t,this},s(document).on("click.bs.collapse.data-api",'[data-toggle="collapse"]',function(t){var e=s(this);e.attr("data-target")||t.preventDefault();var n=o(e),i=n.data("bs.collapse")?"toggle":e.data();l.call(n,i)})}(jQuery),function(s){"use strict";var a='[data-toggle="dropdown"]',i=function(t){s(t).on("click.bs.dropdown",this.toggle)};function l(t){var e=t.attr("data-target");e||(e=(e=t.attr("href"))&&/#[A-Za-z]/.test(e)&&e.replace(/.*(?=#[^\s]*$)/,""));var n=e&&s(e);return n&&n.length?n:t.parent()}function r(i){i&&3===i.which||(s(".dropdown-backdrop").remove(),s(a).each(function(){var t=s(this),e=l(t),n={relatedTarget:this};e.hasClass("open")&&(i&&"click"==i.type&&/input|textarea/i.test(i.target.tagName)&&s.contains(e[0],i.target)||(e.trigger(i=s.Event("hide.bs.dropdown",n)),i.isDefaultPrevented()||(t.attr("aria-expanded","false"),e.removeClass("open").trigger(s.Event("hidden.bs.dropdown",n)))))}))}i.VERSION="3.3.7",i.prototype.toggle=function(t){var e=s(this);if(!e.is(".disabled, :disabled")){var n=l(e),i=n.hasClass("open");if(r(),!i){"ontouchstart"in document.documentElement&&!n.closest(".navbar-nav").length&&s(document.createElement("div")).addClass("dropdown-backdrop").insertAfter(s(this)).on("click",r);var o={relatedTarget:this};if(n.trigger(t=s.Event("show.bs.dropdown",o)),t.isDefaultPrevented())return;e.trigger("focus").attr("aria-expanded","true"),n.toggleClass("open").trigger(s.Event("shown.bs.dropdown",o))}return!1}},i.prototype.keydown=function(t){if(/(38|40|27|32)/.test(t.which)&&!/input|textarea/i.test(t.target.tagName)){var e=s(this);if(t.preventDefault(),t.stopPropagation(),!e.is(".disabled, :disabled")){var n=l(e),i=n.hasClass("open");if(!i&&27!=t.which||i&&27==t.which)return 27==t.which&&n.find(a).trigger("focus"),e.trigger("click");var o=n.find(".dropdown-menu li:not(.disabled):visible a");if(o.length){var r=o.index(t.target);38==t.which&&0<r&&r--,40==t.which&&r<o.length-1&&r++,~r||(r=0),o.eq(r).trigger("focus")}}}};var t=s.fn.dropdown;s.fn.dropdown=function(n){return this.each(function(){var t=s(this),e=t.data("bs.dropdown");e||t.data("bs.dropdown",e=new i(this)),"string"==typeof n&&e[n].call(t)})},s.fn.dropdown.Constructor=i,s.fn.dropdown.noConflict=function(){return s.fn.dropdown=t,this},s(document).on("click.bs.dropdown.data-api",r).on("click.bs.dropdown.data-api",".dropdown form",function(t){t.stopPropagation()}).on("click.bs.dropdown.data-api",a,i.prototype.toggle).on("keydown.bs.dropdown.data-api",a,i.prototype.keydown).on("keydown.bs.dropdown.data-api",".dropdown-menu",i.prototype.keydown)}(jQuery),function(r){"use strict";var s=function(t,e){this.options=e,this.$body=r(document.body),this.$element=r(t),this.$dialog=this.$element.find(".modal-dialog"),this.$backdrop=null,this.isShown=null,this.originalBodyPad=null,this.scrollbarWidth=0,this.ignoreBackdropClick=!1,this.options.remote&&this.$element.find(".modal-content").load(this.options.remote,r.proxy(function(){this.$element.trigger("loaded.bs.modal")},this))};function a(i,o){return this.each(function(){var t=r(this),e=t.data("bs.modal"),n=r.extend({},s.DEFAULTS,t.data(),"object"==typeof i&&i);e||t.data("bs.modal",e=new s(this,n)),"string"==typeof i?e[i](o):n.show&&e.show(o)})}s.VERSION="3.3.7",s.TRANSITION_DURATION=300,s.BACKDROP_TRANSITION_DURATION=150,s.DEFAULTS={backdrop:!0,keyboard:!0,show:!0},s.prototype.toggle=function(t){return this.isShown?this.hide():this.show(t)},s.prototype.show=function(n){var i=this,t=r.Event("show.bs.modal",{relatedTarget:n});this.$element.trigger(t),this.isShown||t.isDefaultPrevented()||(this.isShown=!0,this.checkScrollbar(),this.setScrollbar(),this.$body.addClass("modal-open"),this.escape(),this.resize(),this.$element.on("click.dismiss.bs.modal",'[data-dismiss="modal"]',r.proxy(this.hide,this)),this.$dialog.on("mousedown.dismiss.bs.modal",function(){i.$element.one("mouseup.dismiss.bs.modal",function(t){r(t.target).is(i.$element)&&(i.ignoreBackdropClick=!0)})}),this.backdrop(function(){var t=r.support.transition&&i.$element.hasClass("fade");i.$element.parent().length||i.$element.appendTo(i.$body),i.$element.show().scrollTop(0),i.adjustDialog(),t&&i.$element[0].offsetWidth,i.$element.addClass("in"),i.enforceFocus();var e=r.Event("shown.bs.modal",{relatedTarget:n});t?i.$dialog.one("bsTransitionEnd",function(){i.$element.trigger("focus").trigger(e)}).emulateTransitionEnd(s.TRANSITION_DURATION):i.$element.trigger("focus").trigger(e)}))},s.prototype.hide=function(t){t&&t.preventDefault(),t=r.Event("hide.bs.modal"),this.$element.trigger(t),this.isShown&&!t.isDefaultPrevented()&&(this.isShown=!1,this.escape(),this.resize(),r(document).off("focusin.bs.modal"),this.$element.removeClass("in").off("click.dismiss.bs.modal").off("mouseup.dismiss.bs.modal"),this.$dialog.off("mousedown.dismiss.bs.modal"),r.support.transition&&this.$element.hasClass("fade")?this.$element.one("bsTransitionEnd",r.proxy(this.hideModal,this)).emulateTransitionEnd(s.TRANSITION_DURATION):this.hideModal())},s.prototype.enforceFocus=function(){r(document).off("focusin.bs.modal").on("focusin.bs.modal",r.proxy(function(t){document===t.target||this.$element[0]===t.target||this.$element.has(t.target).length||this.$element.trigger("focus")},this))},s.prototype.escape=function(){this.isShown&&this.options.keyboard?this.$element.on("keydown.dismiss.bs.modal",r.proxy(function(t){27==t.which&&this.hide()},this)):this.isShown||this.$element.off("keydown.dismiss.bs.modal")},s.prototype.resize=function(){this.isShown?r(window).on("resize.bs.modal",r.proxy(this.handleUpdate,this)):r(window).off("resize.bs.modal")},s.prototype.hideModal=function(){var t=this;this.$element.hide(),this.backdrop(function(){t.$body.removeClass("modal-open"),t.resetAdjustments(),t.resetScrollbar(),t.$element.trigger("hidden.bs.modal")})},s.prototype.removeBackdrop=function(){this.$backdrop&&this.$backdrop.remove(),this.$backdrop=null},s.prototype.backdrop=function(t){var e=this,n=this.$element.hasClass("fade")?"fade":"";if(this.isShown&&this.options.backdrop){var i=r.support.transition&&n;if(this.$backdrop=r(document.createElement("div")).addClass("modal-backdrop "+n).appendTo(this.$body),this.$element.on("click.dismiss.bs.modal",r.proxy(function(t){this.ignoreBackdropClick?this.ignoreBackdropClick=!1:t.target===t.currentTarget&&("static"==this.options.backdrop?this.$element[0].focus():this.hide())},this)),i&&this.$backdrop[0].offsetWidth,this.$backdrop.addClass("in"),!t)return;i?this.$backdrop.one("bsTransitionEnd",t).emulateTransitionEnd(s.BACKDROP_TRANSITION_DURATION):t()}else if(!this.isShown&&this.$backdrop){this.$backdrop.removeClass("in");var o=function(){e.removeBackdrop(),t&&t()};r.support.transition&&this.$element.hasClass("fade")?this.$backdrop.one("bsTransitionEnd",o).emulateTransitionEnd(s.BACKDROP_TRANSITION_DURATION):o()}else t&&t()},s.prototype.handleUpdate=function(){this.adjustDialog()},s.prototype.adjustDialog=function(){var t=this.$element[0].scrollHeight>document.documentElement.clientHeight;this.$element.css({paddingLeft:!this.bodyIsOverflowing&&t?this.scrollbarWidth:"",paddingRight:this.bodyIsOverflowing&&!t?this.scrollbarWidth:""})},s.prototype.resetAdjustments=function(){this.$element.css({paddingLeft:"",paddingRight:""})},s.prototype.checkScrollbar=function(){var t=window.innerWidth;if(!t){var e=document.documentElement.getBoundingClientRect();t=e.right-Math.abs(e.left)}this.bodyIsOverflowing=document.body.clientWidth<t,this.scrollbarWidth=this.measureScrollbar()},s.prototype.setScrollbar=function(){var t=parseInt(this.$body.css("padding-right")||0,10);this.originalBodyPad=document.body.style.paddingRight||"",this.bodyIsOverflowing&&this.$body.css("padding-right",t+this.scrollbarWidth)},s.prototype.resetScrollbar=function(){this.$body.css("padding-right",this.originalBodyPad)},s.prototype.measureScrollbar=function(){var t=document.createElement("div");t.className="modal-scrollbar-measure",this.$body.append(t);var e=t.offsetWidth-t.clientWidth;return this.$body[0].removeChild(t),e};var t=r.fn.modal;r.fn.modal=a,r.fn.modal.Constructor=s,r.fn.modal.noConflict=function(){return r.fn.modal=t,this},r(document).on("click.bs.modal.data-api",'[data-toggle="modal"]',function(t){var e=r(this),n=e.attr("href"),i=r(e.attr("data-target")||n&&n.replace(/.*(?=#[^\s]+$)/,"")),o=i.data("bs.modal")?"toggle":r.extend({remote:!/#/.test(n)&&n},i.data(),e.data());e.is("a")&&t.preventDefault(),i.one("show.bs.modal",function(t){t.isDefaultPrevented()||i.one("hidden.bs.modal",function(){e.is(":visible")&&e.trigger("focus")})}),a.call(i,o,this)})}(jQuery),function(g){"use strict";var m=function(t,e){this.type=null,this.options=null,this.enabled=null,this.timeout=null,this.hoverState=null,this.$element=null,this.inState=null,this.init("tooltip",t,e)};m.VERSION="3.3.7",m.TRANSITION_DURATION=150,m.DEFAULTS={animation:!0,placement:"top",selector:!1,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,container:!1,viewport:{selector:"body",padding:0}},m.prototype.init=function(t,e,n){if(this.enabled=!0,this.type=t,this.$element=g(e),this.options=this.getOptions(n),this.$viewport=this.options.viewport&&g(g.isFunction(this.options.viewport)?this.options.viewport.call(this,this.$element):this.options.viewport.selector||this.options.viewport),this.inState={click:!1,hover:!1,focus:!1},this.$element[0]instanceof document.constructor&&!this.options.selector)throw new Error("`selector` option must be specified when initializing "+this.type+" on the window.document object!");for(var i=this.options.trigger.split(" "),o=i.length;o--;){var r=i[o];if("click"==r)this.$element.on("click."+this.type,this.options.selector,g.proxy(this.toggle,this));else if("manual"!=r){var s="hover"==r?"mouseenter":"focusin",a="hover"==r?"mouseleave":"focusout";this.$element.on(s+"."+this.type,this.options.selector,g.proxy(this.enter,this)),this.$element.on(a+"."+this.type,this.options.selector,g.proxy(this.leave,this))}}this.options.selector?this._options=g.extend({},this.options,{trigger:"manual",selector:""}):this.fixTitle()},m.prototype.getDefaults=function(){return m.DEFAULTS},m.prototype.getOptions=function(t){return(t=g.extend({},this.getDefaults(),this.$element.data(),t)).delay&&"number"==typeof t.delay&&(t.delay={show:t.delay,hide:t.delay}),t},m.prototype.getDelegateOptions=function(){var n={},i=this.getDefaults();return this._options&&g.each(this._options,function(t,e){i[t]!=e&&(n[t]=e)}),n},m.prototype.enter=function(t){var e=t instanceof this.constructor?t:g(t.currentTarget).data("bs."+this.type);if(e||(e=new this.constructor(t.currentTarget,this.getDelegateOptions()),g(t.currentTarget).data("bs."+this.type,e)),t instanceof g.Event&&(e.inState["focusin"==t.type?"focus":"hover"]=!0),e.tip().hasClass("in")||"in"==e.hoverState)e.hoverState="in";else{if(clearTimeout(e.timeout),e.hoverState="in",!e.options.delay||!e.options.delay.show)return e.show();e.timeout=setTimeout(function(){"in"==e.hoverState&&e.show()},e.options.delay.show)}},m.prototype.isInStateTrue=function(){for(var t in this.inState)if(this.inState[t])return!0;return!1},m.prototype.leave=function(t){var e=t instanceof this.constructor?t:g(t.currentTarget).data("bs."+this.type);if(e||(e=new this.constructor(t.currentTarget,this.getDelegateOptions()),g(t.currentTarget).data("bs."+this.type,e)),t instanceof g.Event&&(e.inState["focusout"==t.type?"focus":"hover"]=!1),!e.isInStateTrue()){if(clearTimeout(e.timeout),e.hoverState="out",!e.options.delay||!e.options.delay.hide)return e.hide();e.timeout=setTimeout(function(){"out"==e.hoverState&&e.hide()},e.options.delay.hide)}},m.prototype.show=function(){var t=g.Event("show.bs."+this.type);if(this.hasContent()&&this.enabled){this.$element.trigger(t);var e=g.contains(this.$element[0].ownerDocument.documentElement,this.$element[0]);if(t.isDefaultPrevented()||!e)return;var n=this,i=this.tip(),o=this.getUID(this.type);this.setContent(),i.attr("id",o),this.$element.attr("aria-describedby",o),this.options.animation&&i.addClass("fade");var r="function"==typeof this.options.placement?this.options.placement.call(this,i[0],this.$element[0]):this.options.placement,s=/\s?auto?\s?/i,a=s.test(r);a&&(r=r.replace(s,"")||"top"),i.detach().css({top:0,left:0,display:"block"}).addClass(r).data("bs."+this.type,this),this.options.container?i.appendTo(this.options.container):i.insertAfter(this.$element),this.$element.trigger("inserted.bs."+this.type);var l=this.getPosition(),u=i[0].offsetWidth,c=i[0].offsetHeight;if(a){var f=r,p=this.getPosition(this.$viewport);r="bottom"==r&&l.bottom+c>p.bottom?"top":"top"==r&&l.top-c<p.top?"bottom":"right"==r&&l.right+u>p.width?"left":"left"==r&&l.left-u<p.left?"right":r,i.removeClass(f).addClass(r)}var d=this.getCalculatedOffset(r,l,u,c);this.applyPlacement(d,r);var h=function(){var t=n.hoverState;n.$element.trigger("shown.bs."+n.type),n.hoverState=null,"out"==t&&n.leave(n)};g.support.transition&&this.$tip.hasClass("fade")?i.one("bsTransitionEnd",h).emulateTransitionEnd(m.TRANSITION_DURATION):h()}},m.prototype.applyPlacement=function(t,e){var n=this.tip(),i=n[0].offsetWidth,o=n[0].offsetHeight,r=parseInt(n.css("margin-top"),10),s=parseInt(n.css("margin-left"),10);isNaN(r)&&(r=0),isNaN(s)&&(s=0),t.top+=r,t.left+=s,g.offset.setOffset(n[0],g.extend({using:function(t){n.css({top:Math.round(t.top),left:Math.round(t.left)})}},t),0),n.addClass("in");var a=n[0].offsetWidth,l=n[0].offsetHeight;"top"==e&&l!=o&&(t.top=t.top+o-l);var u=this.getViewportAdjustedDelta(e,t,a,l);u.left?t.left+=u.left:t.top+=u.top;var c=/top|bottom/.test(e),f=c?2*u.left-i+a:2*u.top-o+l,p=c?"offsetWidth":"offsetHeight";n.offset(t),this.replaceArrow(f,n[0][p],c)},m.prototype.replaceArrow=function(t,e,n){this.arrow().css(n?"left":"top",50*(1-t/e)+"%").css(n?"top":"left","")},m.prototype.setContent=function(){var t=this.tip(),e=this.getTitle();t.find(".tooltip-inner")[this.options.html?"html":"text"](e),t.removeClass("fade in top bottom left right")},m.prototype.hide=function(t){var e=this,n=g(this.$tip),i=g.Event("hide.bs."+this.type);function o(){"in"!=e.hoverState&&n.detach(),e.$element&&e.$element.removeAttr("aria-describedby").trigger("hidden.bs."+e.type),t&&t()}if(this.$element.trigger(i),!i.isDefaultPrevented())return n.removeClass("in"),g.support.transition&&n.hasClass("fade")?n.one("bsTransitionEnd",o).emulateTransitionEnd(m.TRANSITION_DURATION):o(),this.hoverState=null,this},m.prototype.fixTitle=function(){var t=this.$element;(t.attr("title")||"string"!=typeof t.attr("data-original-title"))&&t.attr("data-original-title",t.attr("title")||"").attr("title","")},m.prototype.hasContent=function(){return this.getTitle()},m.prototype.getPosition=function(t){var e=(t=t||this.$element)[0],n="BODY"==e.tagName,i=e.getBoundingClientRect();null==i.width&&(i=g.extend({},i,{width:i.right-i.left,height:i.bottom-i.top}));var o=window.SVGElement&&e instanceof window.SVGElement,r=n?{top:0,left:0}:o?null:t.offset(),s={scroll:n?document.documentElement.scrollTop||document.body.scrollTop:t.scrollTop()},a=n?{width:g(window).width(),height:g(window).height()}:null;return g.extend({},i,s,a,r)},m.prototype.getCalculatedOffset=function(t,e,n,i){return"bottom"==t?{top:e.top+e.height,left:e.left+e.width/2-n/2}:"top"==t?{top:e.top-i,left:e.left+e.width/2-n/2}:"left"==t?{top:e.top+e.height/2-i/2,left:e.left-n}:{top:e.top+e.height/2-i/2,left:e.left+e.width}},m.prototype.getViewportAdjustedDelta=function(t,e,n,i){var o={top:0,left:0};if(!this.$viewport)return o;var r=this.options.viewport&&this.options.viewport.padding||0,s=this.getPosition(this.$viewport);if(/right|left/.test(t)){var a=e.top-r-s.scroll,l=e.top+r-s.scroll+i;a<s.top?o.top=s.top-a:l>s.top+s.height&&(o.top=s.top+s.height-l)}else{var u=e.left-r,c=e.left+r+n;u<s.left?o.left=s.left-u:c>s.right&&(o.left=s.left+s.width-c)}return o},m.prototype.getTitle=function(){var t=this.$element,e=this.options;return t.attr("data-original-title")||("function"==typeof e.title?e.title.call(t[0]):e.title)},m.prototype.getUID=function(t){for(;t+=~~(1e6*Math.random()),document.getElementById(t););return t},m.prototype.tip=function(){if(!this.$tip&&(this.$tip=g(this.options.template),1!=this.$tip.length))throw new Error(this.type+" `template` option must consist of exactly 1 top-level element!");return this.$tip},m.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".tooltip-arrow")},m.prototype.enable=function(){this.enabled=!0},m.prototype.disable=function(){this.enabled=!1},m.prototype.toggleEnabled=function(){this.enabled=!this.enabled},m.prototype.toggle=function(t){var e=this;t&&((e=g(t.currentTarget).data("bs."+this.type))||(e=new this.constructor(t.currentTarget,this.getDelegateOptions()),g(t.currentTarget).data("bs."+this.type,e))),t?(e.inState.click=!e.inState.click,e.isInStateTrue()?e.enter(e):e.leave(e)):e.tip().hasClass("in")?e.leave(e):e.enter(e)},m.prototype.destroy=function(){var t=this;clearTimeout(this.timeout),this.hide(function(){t.$element.off("."+t.type).removeData("bs."+t.type),t.$tip&&t.$tip.detach(),t.$tip=null,t.$arrow=null,t.$viewport=null,t.$element=null})};var t=g.fn.tooltip;g.fn.tooltip=function(i){return this.each(function(){var t=g(this),e=t.data("bs.tooltip"),n="object"==typeof i&&i;!e&&/destroy|hide/.test(i)||(e||t.data("bs.tooltip",e=new m(this,n)),"string"==typeof i&&e[i]())})},g.fn.tooltip.Constructor=m,g.fn.tooltip.noConflict=function(){return g.fn.tooltip=t,this}}(jQuery),function(o){"use strict";var r=function(t,e){this.init("popover",t,e)};if(!o.fn.tooltip)throw new Error("Popover requires tooltip.js");r.VERSION="3.3.7",r.DEFAULTS=o.extend({},o.fn.tooltip.Constructor.DEFAULTS,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'}),((r.prototype=o.extend({},o.fn.tooltip.Constructor.prototype)).constructor=r).prototype.getDefaults=function(){return r.DEFAULTS},r.prototype.setContent=function(){var t=this.tip(),e=this.getTitle(),n=this.getContent();t.find(".popover-title")[this.options.html?"html":"text"](e),t.find(".popover-content").children().detach().end()[this.options.html?"string"==typeof n?"html":"append":"text"](n),t.removeClass("fade top bottom left right in"),t.find(".popover-title").html()||t.find(".popover-title").hide()},r.prototype.hasContent=function(){return this.getTitle()||this.getContent()},r.prototype.getContent=function(){var t=this.$element,e=this.options;return t.attr("data-content")||("function"==typeof e.content?e.content.call(t[0]):e.content)},r.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".arrow")};var t=o.fn.popover;o.fn.popover=function(i){return this.each(function(){var t=o(this),e=t.data("bs.popover"),n="object"==typeof i&&i;!e&&/destroy|hide/.test(i)||(e||t.data("bs.popover",e=new r(this,n)),"string"==typeof i&&e[i]())})},o.fn.popover.Constructor=r,o.fn.popover.noConflict=function(){return o.fn.popover=t,this}}(jQuery),function(r){"use strict";function o(t,e){this.$body=r(document.body),this.$scrollElement=r(t).is(document.body)?r(window):r(t),this.options=r.extend({},o.DEFAULTS,e),this.selector=(this.options.target||"")+" .nav li > a",this.offsets=[],this.targets=[],this.activeTarget=null,this.scrollHeight=0,this.$scrollElement.on("scroll.bs.scrollspy",r.proxy(this.process,this)),this.refresh(),this.process()}function e(i){return this.each(function(){var t=r(this),e=t.data("bs.scrollspy"),n="object"==typeof i&&i;e||t.data("bs.scrollspy",e=new o(this,n)),"string"==typeof i&&e[i]()})}o.VERSION="3.3.7",o.DEFAULTS={offset:10},o.prototype.getScrollHeight=function(){return this.$scrollElement[0].scrollHeight||Math.max(this.$body[0].scrollHeight,document.documentElement.scrollHeight)},o.prototype.refresh=function(){var t=this,i="offset",o=0;this.offsets=[],this.targets=[],this.scrollHeight=this.getScrollHeight(),r.isWindow(this.$scrollElement[0])||(i="position",o=this.$scrollElement.scrollTop()),this.$body.find(this.selector).map(function(){var t=r(this),e=t.data("target")||t.attr("href"),n=/^#./.test(e)&&r(e);return n&&n.length&&n.is(":visible")&&[[n[i]().top+o,e]]||null}).sort(function(t,e){return t[0]-e[0]}).each(function(){t.offsets.push(this[0]),t.targets.push(this[1])})},o.prototype.process=function(){var t,e=this.$scrollElement.scrollTop()+this.options.offset,n=this.getScrollHeight(),i=this.options.offset+n-this.$scrollElement.height(),o=this.offsets,r=this.targets,s=this.activeTarget;if(this.scrollHeight!=n&&this.refresh(),i<=e)return s!=(t=r[r.length-1])&&this.activate(t);if(s&&e<o[0])return this.activeTarget=null,this.clear();for(t=o.length;t--;)s!=r[t]&&e>=o[t]&&(void 0===o[t+1]||e<o[t+1])&&this.activate(r[t])},o.prototype.activate=function(t){this.activeTarget=t,this.clear();var e=this.selector+'[data-target="'+t+'"],'+this.selector+'[href="'+t+'"]',n=r(e).parents("li").addClass("active");n.parent(".dropdown-menu").length&&(n=n.closest("li.dropdown").addClass("active")),n.trigger("activate.bs.scrollspy")},o.prototype.clear=function(){r(this.selector).parentsUntil(this.options.target,".active").removeClass("active")};var t=r.fn.scrollspy;r.fn.scrollspy=e,r.fn.scrollspy.Constructor=o,r.fn.scrollspy.noConflict=function(){return r.fn.scrollspy=t,this},r(window).on("load.bs.scrollspy.data-api",function(){r('[data-spy="scroll"]').each(function(){var t=r(this);e.call(t,t.data())})})}(jQuery),function(a){"use strict";var s=function(t){this.element=a(t)};function e(n){return this.each(function(){var t=a(this),e=t.data("bs.tab");e||t.data("bs.tab",e=new s(this)),"string"==typeof n&&e[n]()})}s.VERSION="3.3.7",s.TRANSITION_DURATION=150,s.prototype.show=function(){var t=this.element,e=t.closest("ul:not(.dropdown-menu)"),n=t.data("target");if(n||(n=(n=t.attr("href"))&&n.replace(/.*(?=#[^\s]*$)/,"")),!t.parent("li").hasClass("active")){var i=e.find(".active:last a"),o=a.Event("hide.bs.tab",{relatedTarget:t[0]}),r=a.Event("show.bs.tab",{relatedTarget:i[0]});if(i.trigger(o),t.trigger(r),!r.isDefaultPrevented()&&!o.isDefaultPrevented()){var s=a(n);this.activate(t.closest("li"),e),this.activate(s,s.parent(),function(){i.trigger({type:"hidden.bs.tab",relatedTarget:t[0]}),t.trigger({type:"shown.bs.tab",relatedTarget:i[0]})})}}},s.prototype.activate=function(t,e,n){var i=e.find("> .active"),o=n&&a.support.transition&&(i.length&&i.hasClass("fade")||!!e.find("> .fade").length);function r(){i.removeClass("active").find("> .dropdown-menu > .active").removeClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded",!1),t.addClass("active").find('[data-toggle="tab"]').attr("aria-expanded",!0),o?(t[0].offsetWidth,t.addClass("in")):t.removeClass("fade"),t.parent(".dropdown-menu").length&&t.closest("li.dropdown").addClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded",!0),n&&n()}i.length&&o?i.one("bsTransitionEnd",r).emulateTransitionEnd(s.TRANSITION_DURATION):r(),i.removeClass("in")};var t=a.fn.tab;a.fn.tab=e,a.fn.tab.Constructor=s,a.fn.tab.noConflict=function(){return a.fn.tab=t,this};var n=function(t){t.preventDefault(),e.call(a(this),"show")};a(document).on("click.bs.tab.data-api",'[data-toggle="tab"]',n).on("click.bs.tab.data-api",'[data-toggle="pill"]',n)}(jQuery),function(l){"use strict";var u=function(t,e){this.options=l.extend({},u.DEFAULTS,e),this.$target=l(this.options.target).on("scroll.bs.affix.data-api",l.proxy(this.checkPosition,this)).on("click.bs.affix.data-api",l.proxy(this.checkPositionWithEventLoop,this)),this.$element=l(t),this.affixed=null,this.unpin=null,this.pinnedOffset=null,this.checkPosition()};function n(i){return this.each(function(){var t=l(this),e=t.data("bs.affix"),n="object"==typeof i&&i;e||t.data("bs.affix",e=new u(this,n)),"string"==typeof i&&e[i]()})}u.VERSION="3.3.7",u.RESET="affix affix-top affix-bottom",u.DEFAULTS={offset:0,target:window},u.prototype.getState=function(t,e,n,i){var o=this.$target.scrollTop(),r=this.$element.offset(),s=this.$target.height();if(null!=n&&"top"==this.affixed)return o<n&&"top";if("bottom"==this.affixed)return null!=n?!(o+this.unpin<=r.top)&&"bottom":!(o+s<=t-i)&&"bottom";var a=null==this.affixed,l=a?o:r.top;return null!=n&&o<=n?"top":null!=i&&t-i<=l+(a?s:e)&&"bottom"},u.prototype.getPinnedOffset=function(){if(this.pinnedOffset)return this.pinnedOffset;this.$element.removeClass(u.RESET).addClass("affix");var t=this.$target.scrollTop(),e=this.$element.offset();return this.pinnedOffset=e.top-t},u.prototype.checkPositionWithEventLoop=function(){setTimeout(l.proxy(this.checkPosition,this),1)},u.prototype.checkPosition=function(){if(this.$element.is(":visible")){var t=this.$element.height(),e=this.options.offset,n=e.top,i=e.bottom,o=Math.max(l(document).height(),l(document.body).height());"object"!=typeof e&&(i=n=e),"function"==typeof n&&(n=e.top(this.$element)),"function"==typeof i&&(i=e.bottom(this.$element));var r=this.getState(o,t,n,i);if(this.affixed!=r){null!=this.unpin&&this.$element.css("top","");var s="affix"+(r?"-"+r:""),a=l.Event(s+".bs.affix");if(this.$element.trigger(a),a.isDefaultPrevented())return;this.affixed=r,this.unpin="bottom"==r?this.getPinnedOffset():null,this.$element.removeClass(u.RESET).addClass(s).trigger(s.replace("affix","affixed")+".bs.affix")}"bottom"==r&&this.$element.offset({top:o-t-i})}};var t=l.fn.affix;l.fn.affix=n,l.fn.affix.Constructor=u,l.fn.affix.noConflict=function(){return l.fn.affix=t,this},l(window).on("load",function(){l('[data-spy="affix"]').each(function(){var t=l(this),e=t.data();e.offset=e.offset||{},null!=e.offsetBottom&&(e.offset.bottom=e.offsetBottom),null!=e.offsetTop&&(e.offset.top=e.offsetTop),n.call(t,e)})})}(jQuery),$(".navbar-lower").affix({offset:{top:50}});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
